{"version":3,"sources":["../src/actions/swap.ts","../src/constants.ts","../src/keypairUtils.ts","../src/actions/transfer.ts","../src/providers/wallet.ts","../src/service.ts","../src/index.ts"],"sourcesContent":["import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type State,\n  composePromptFromState,\n  logger,\n  parseJSONObjectFromText,\n} from '@elizaos/core';\nimport { Connection, PublicKey, VersionedTransaction } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { SOLANA_SERVICE_NAME } from '../constants';\nimport { getWalletKey } from '../keypairUtils';\nimport type { SolanaService } from '../service';\n\nimport type { Item } from '../types';\n/**\n * Fetches the number of decimals for a given token mint address.\n *\n * @param {Connection} connection - Solana connection object.\n * @param {string} mintAddress - Address of the token mint.\n * @returns {Promise<number>} - Number of decimals for the token.\n * @throws {Error} - If unable to fetch token decimals.\n */\nasync function getTokenDecimals(connection: Connection, mintAddress: string): Promise<number> {\n  const mintPublicKey = new PublicKey(mintAddress);\n  const tokenAccountInfo = await connection.getParsedAccountInfo(mintPublicKey);\n\n  if (\n    tokenAccountInfo.value &&\n    typeof tokenAccountInfo.value.data === 'object' &&\n    'parsed' in tokenAccountInfo.value.data\n  ) {\n    const parsedInfo = tokenAccountInfo.value.data.parsed?.info;\n    if (parsedInfo && typeof parsedInfo.decimals === 'number') {\n      return parsedInfo.decimals;\n    }\n  }\n\n  throw new Error('Unable to fetch token decimals');\n}\n\n/**\n * Swaps tokens using the specified connection, wallet public key, input and output token contract addresses,\n * and amount. Returns a Promise that resolves to the swap data.\n *\n * @param {Connection} connection The connection object to use for interacting with the blockchain.\n * @param {PublicKey} walletPublicKey The public key of the wallet initiating the swap.\n * @param {string} inputTokenCA The contract address of the input token.\n * @param {string} outputTokenCA The contract address of the output token.\n * @param {number} amount The amount of tokens to swap.\n * @returns {Promise<unknown>} A Promise that resolves to the swap data object.\n */\nasync function swapToken(\n  connection: Connection,\n  walletPublicKey: PublicKey,\n  inputTokenCA: string,\n  outputTokenCA: string,\n  amount: number\n): Promise<unknown> {\n  try {\n    const decimals =\n      inputTokenCA === process.env.SOL_ADDRESS\n        ? new BigNumber(9)\n        : new BigNumber(await getTokenDecimals(connection, inputTokenCA));\n\n    logger.log('Decimals:', decimals.toString());\n\n    const amountBN = new BigNumber(amount);\n    const adjustedAmount = amountBN.multipliedBy(new BigNumber(10).pow(decimals));\n\n    logger.log('Fetching quote with params:', {\n      inputMint: inputTokenCA,\n      outputMint: outputTokenCA,\n      amount: adjustedAmount,\n    });\n\n    const quoteResponse = await fetch(\n      `https://quote-api.jup.ag/v6/quote?inputMint=${inputTokenCA}&outputMint=${outputTokenCA}&amount=${adjustedAmount}&dynamicSlippage=true&maxAccounts=64`\n    );\n    const quoteData = await quoteResponse.json();\n\n    if (!quoteData || quoteData.error) {\n      logger.error('Quote error:', quoteData);\n      throw new Error(`Failed to get quote: ${quoteData?.error || 'Unknown error'}`);\n    }\n\n    const swapRequestBody = {\n      quoteResponse: quoteData,\n      userPublicKey: walletPublicKey.toBase58(),\n      dynamicComputeUnitLimit: true,\n      dynamicSlippage: true,\n      priorityLevelWithMaxLamports: {\n        maxLamports: 4000000,\n        priorityLevel: 'veryHigh',\n      },\n    };\n\n    const swapResponse = await fetch('https://quote-api.jup.ag/v6/swap', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(swapRequestBody),\n    });\n\n    const swapData = await swapResponse.json();\n\n    if (!swapData || !swapData.swapTransaction) {\n      logger.error('Swap error:', swapData);\n      throw new Error(\n        `Failed to get swap transaction: ${swapData?.error || 'No swap transaction returned'}`\n      );\n    }\n\n    return swapData;\n  } catch (error) {\n    logger.error('Error in swapToken:', error);\n    throw error;\n  }\n}\n\n// Get token from wallet data using SolanaService\n/**\n * Retrieves the token address from the wallet for the specified token symbol.\n *\n * @param {IAgentRuntime} runtime - The agent runtime.\n * @param {string} tokenSymbol - The token symbol to retrieve the address for.\n * @returns {Promise<string|null>} The token address if found, null otherwise.\n */\nasync function getTokenFromWallet(\n  runtime: IAgentRuntime,\n  tokenSymbol: string\n): Promise<string | null> {\n  try {\n    const solanaService = runtime.getService(SOLANA_SERVICE_NAME) as SolanaService;\n    if (!solanaService) {\n      throw new Error('SolanaService not initialized');\n    }\n\n    const walletData = await solanaService.getCachedData();\n    if (!walletData) {\n      return null;\n    }\n\n    const token = walletData.items.find(\n      (item: Item) => item.symbol.toLowerCase() === tokenSymbol.toLowerCase()\n    );\n\n    return token ? token.address : null;\n  } catch (error) {\n    logger.error('Error checking token in wallet:', error);\n    return null;\n  }\n}\n\n/**\n * Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n *\n * Example response:\n * ```json\n * {\n *     \"inputTokenSymbol\": \"SOL\",\n *     \"outputTokenSymbol\": \"USDC\",\n *     \"inputTokenCA\": \"So11111111111111111111111111111111111111112\",\n *     \"outputTokenCA\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n *     \"amount\": 1.5\n * }\n * ```\n *\n * {{recentMessages}}\n *\n * Given the recent messages and wallet information below:\n *\n * {{walletInfo}}\n *\n * Extract the following information about the requested token swap:\n * - Input token symbol (the token being sold)\n * - Output token symbol (the token being bought)\n * - Input token contract address if provided\n * - Output token contract address if provided\n * - Amount to swap\n *\n * Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n */\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"inputTokenSymbol\": \"SOL\",\n    \"outputTokenSymbol\": \"USDC\",\n    \"inputTokenCA\": \"So11111111111111111111111111111111111111112\",\n    \"outputTokenCA\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"amount\": 1.5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol (the token being sold)\n- Output token symbol (the token being bought)\n- Input token contract address if provided\n- Output token contract address if provided\n- Amount to swap\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.`;\n\n/**\n * Action for executing a token swap from one token to another on Solana.\n *\n * @type {Action}\n * @property {string} name - The name of the action (\"SWAP_SOLANA\").\n * @property {string[]} similes - Alternative names for the action.\n * @property {Function} validate - Asynchronous function to validate if Solana service is available.\n * @property {string} description - Description of the action.\n * @property {Function} handler - Asynchronous function to handle the token swap process.\n * @property {ActionExample[][]} examples - Examples demonstrating how to use the action.\n */\n\nexport const executeSwap: Action = {\n  name: 'SWAP_SOLANA',\n  similes: [\n    'SWAP_SOL',\n    'SWAP_TOKENS_SOLANA',\n    'TOKEN_SWAP_SOLANA',\n    'TRADE_TOKENS_SOLANA',\n    'EXCHANGE_TOKENS_SOLANA',\n  ],\n  validate: async (runtime: IAgentRuntime, _message: Memory) => {\n    const solanaService = runtime.getService(SOLANA_SERVICE_NAME);\n    return !!solanaService;\n  },\n  description:\n    'Perform a token swap from one token to another on Solana. Works with SOL and SPL tokens.',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    state = await runtime.composeState(message, ['RECENT_MESSAGES']);\n\n    try {\n      const solanaService = runtime.getService(SOLANA_SERVICE_NAME) as SolanaService;\n      if (!solanaService) {\n        throw new Error('SolanaService not initialized');\n      }\n\n      const walletData = await solanaService.getCachedData();\n      state.values.walletInfo = walletData;\n\n      const swapPrompt = composePromptFromState({\n        state,\n        template: swapTemplate,\n      });\n\n      const result = await runtime.useModel(ModelType.TEXT_LARGE, {\n        prompt: swapPrompt,\n      });\n\n      const response = parseJSONObjectFromText(result);\n\n      // Handle SOL addresses\n      if (response.inputTokenSymbol?.toUpperCase() === 'SOL') {\n        response.inputTokenCA = process.env.SOL_ADDRESS;\n      }\n      if (response.outputTokenSymbol?.toUpperCase() === 'SOL') {\n        response.outputTokenCA = process.env.SOL_ADDRESS;\n      }\n\n      // Resolve token addresses if needed\n      if (!response.inputTokenCA && response.inputTokenSymbol) {\n        response.inputTokenCA = await getTokenFromWallet(runtime, response.inputTokenSymbol);\n        if (!response.inputTokenCA) {\n          callback?.({ text: 'Could not find the input token in your wallet' });\n          return false;\n        }\n      }\n\n      if (!response.outputTokenCA && response.outputTokenSymbol) {\n        response.outputTokenCA = await getTokenFromWallet(runtime, response.outputTokenSymbol);\n        if (!response.outputTokenCA) {\n          callback?.({\n            text: 'Could not find the output token in your wallet',\n          });\n          return false;\n        }\n      }\n\n      if (!response.amount) {\n        callback?.({ text: 'Please specify the amount you want to swap' });\n        return false;\n      }\n\n      const connection = new Connection(\n        runtime.getSetting('SOLANA_RPC_URL') || 'https://api.mainnet-beta.solana.com'\n      );\n      const { publicKey: walletPublicKey } = await getWalletKey(runtime, false);\n\n      const swapResult = (await swapToken(\n        connection,\n        walletPublicKey,\n        response.inputTokenCA as string,\n        response.outputTokenCA as string,\n        response.amount as number\n      )) as { swapTransaction: string };\n\n      const transactionBuf = Buffer.from(swapResult.swapTransaction, 'base64');\n      const transaction = VersionedTransaction.deserialize(transactionBuf);\n\n      const { keypair } = await getWalletKey(runtime, true);\n      if (keypair.publicKey.toBase58() !== walletPublicKey.toBase58()) {\n        throw new Error(\"Generated public key doesn't match expected public key\");\n      }\n\n      transaction.sign([keypair]);\n\n      const latestBlockhash = await connection.getLatestBlockhash();\n      const txid = await connection.sendTransaction(transaction, {\n        skipPreflight: false,\n        maxRetries: 3,\n        preflightCommitment: 'confirmed',\n      });\n\n      const confirmation = await connection.confirmTransaction(\n        {\n          signature: txid,\n          blockhash: latestBlockhash.blockhash,\n          lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n        },\n        'confirmed'\n      );\n\n      if (confirmation.value.err) {\n        throw new Error(`Transaction failed: ${confirmation.value.err}`);\n      }\n\n      callback?.({\n        text: `Swap completed successfully! Transaction ID: ${txid}`,\n        content: { success: true, txid },\n      });\n\n      return true;\n    } catch (error) {\n      logger.error('Error during token swap:', error);\n      callback?.({\n        text: `Swap failed: ${error.message}`,\n        content: { error: error.message },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Swap 0.1 SOL for USDC',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you swap 0.1 SOL for USDC\",\n          actions: ['SWAP_SOLANA'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","export const SOLANA_SERVICE_NAME = 'solana';\nexport const SOLANA_WALLET_DATA_CACHE_KEY = 'solana/walletData';\n","import { type IAgentRuntime, logger } from '@elizaos/core';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\n/**\n * Interface representing the result of a keypair generation.\n * @typedef {Object} KeypairResult\n * @property {Keypair} [keypair] - The generated keypair.\n * @property {PublicKey} [publicKey] - The public key corresponding to the generated keypair.\n */\nexport interface KeypairResult {\n  keypair?: Keypair;\n  publicKey?: PublicKey;\n}\n\n/**\n * Gets either a keypair or public key based on TEE mode and runtime settings\n * @param runtime The agent runtime\n * @param requirePrivateKey Whether to return a full keypair (true) or just public key (false)\n * @returns KeypairResult containing either keypair or public key\n */\n/**\n * Retrieves the wallet keypair or public key based on the specified runtime settings.\n *\n * @param {IAgentRuntime} runtime - The IAgentRuntime instance to retrieve settings from.\n * @param {boolean} [requirePrivateKey=true] - Specify whether the private key is required. Default is true.\n * @returns {Promise<KeypairResult>} The keypair result object containing the keypair or public key.\n */\nexport async function getWalletKey(\n  runtime: IAgentRuntime,\n  requirePrivateKey = true\n): Promise<KeypairResult> {\n  // TEE mode is OFF\n  if (requirePrivateKey) {\n    const privateKeyString =\n      runtime.getSetting('SOLANA_PRIVATE_KEY') ?? runtime.getSetting('WALLET_PRIVATE_KEY');\n\n    if (!privateKeyString) {\n      throw new Error('Private key not found in settings');\n    }\n\n    try {\n      // First try base58\n      const secretKey = bs58.decode(privateKeyString);\n      return { keypair: Keypair.fromSecretKey(secretKey) };\n    } catch (e) {\n      logger.log('Error decoding base58 private key:', e);\n      try {\n        // Then try base64\n        logger.log('Try decoding base64 instead');\n        const secretKey = Uint8Array.from(Buffer.from(privateKeyString, 'base64'));\n        return { keypair: Keypair.fromSecretKey(secretKey) };\n      } catch (e2) {\n        logger.error('Error decoding private key: ', e2);\n        throw new Error('Invalid private key format');\n      }\n    }\n  } else {\n    const publicKeyString =\n      runtime.getSetting('SOLANA_PUBLIC_KEY') ?? runtime.getSetting('WALLET_PUBLIC_KEY');\n\n    if (!publicKeyString) {\n      throw new Error(\n        'Solana Public key not found in settings, but plugin was loaded, please set SOLANA_PUBLIC_KEY'\n      );\n    }\n\n    return { publicKey: new PublicKey(publicKeyString) };\n  }\n}\n","import {\n  type Action,\n  type ActionExample,\n  type Content,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type State,\n  composePromptFromState,\n  logger,\n  parseJSONObjectFromText,\n} from '@elizaos/core';\nimport {\n  createAssociatedTokenAccountInstruction,\n  createTransferInstruction,\n  getAssociatedTokenAddressSync,\n} from '@solana/spl-token';\nimport {\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionMessage,\n  VersionedTransaction,\n} from '@solana/web3.js';\nimport { getWalletKey } from '../keypairUtils';\n\n/**\n * Interface representing the content of a transfer.\n *\n * @interface TransferContent\n * @extends Content\n * @property {string | null} tokenAddress - The address of the token being transferred, or null for SOL transfers\n * @property {string} recipient - The address of the recipient of the transfer\n * @property {string | number} amount - The amount of the transfer, represented as a string or number\n */\ninterface TransferContent extends Content {\n  tokenAddress: string | null; // null for SOL transfers\n  recipient: string;\n  amount: string | number;\n}\n\n/**\n * Checks if the given transfer content is valid based on the type of transfer.\n * @param {TransferContent} content - The content to be validated for transfer.\n * @returns {boolean} Returns true if the content is valid for transfer, and false otherwise.\n */\nfunction isTransferContent(content: TransferContent): boolean {\n  logger.log('Content for transfer', content);\n\n  // Base validation\n  if (!content.recipient || typeof content.recipient !== 'string' || !content.amount) {\n    return false;\n  }\n\n  if (content.tokenAddress === 'null') {\n    content.tokenAddress = null;\n  }\n\n  return typeof content.amount === 'string' || typeof content.amount === 'number';\n}\n\n/**\n * Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n *\n * Example responses:\n * For SPL tokens:\n * ```json\n * {\n *    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\n *    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n *    \"amount\": \"1000\"\n * }\n * ```\n *\n * For SOL:\n * ```json\n * {\n *    \"tokenAddress\": null,\n *    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n *    \"amount\": 1.5\n * }\n * ```\n *\n * {{recentMessages}}\n *\n * Extract the following information about the requested transfer:\n * - Token contract address (use null for SOL transfers)\n * - Recipient wallet address\n * - Amount to transfer\n */\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample responses:\nFor SPL tokens:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n    \"amount\": \"1000\"\n}\n\\`\\`\\`\n\nFor SOL:\n\\`\\`\\`json\n{\n    \"tokenAddress\": null,\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n    \"amount\": 1.5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested transfer:\n- Token contract address (use null for SOL transfers)\n- Recipient wallet address\n- Amount to transfer\n`;\n\nexport default {\n  name: 'TRANSFER_SOLANA',\n  similes: [\n    'TRANSFER_SOL',\n    'SEND_TOKEN_SOLANA',\n    'TRANSFER_TOKEN_SOLANA',\n    'SEND_TOKENS_SOLANA',\n    'TRANSFER_TOKENS_SOLANA',\n    'SEND_SOL',\n    'SEND_TOKEN_SOL',\n    'PAY_SOL',\n    'PAY_TOKEN_SOL',\n    'PAY_TOKENS_SOL',\n    'PAY_TOKENS_SOLANA',\n    'PAY_SOLANA',\n  ],\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    logger.log('Validating transfer from entity:', message.entityId);\n    return true;\n  },\n  description: 'Transfer SOL or SPL tokens to another address on Solana.',\n  handler: async (\n    runtime: IAgentRuntime,\n    _message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.log('Starting TRANSFER handler...');\n\n    const transferPrompt = composePromptFromState({\n      state: state,\n      template: transferTemplate,\n    });\n\n    const result = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt: transferPrompt,\n    });\n\n    const content = parseJSONObjectFromText(result);\n\n    if (!isTransferContent(content)) {\n      if (callback) {\n        callback({\n          text: 'Need a valid recipient address and amount to transfer.',\n          content: { error: 'Invalid transfer content' },\n        });\n      }\n      return false;\n    }\n\n    try {\n      const { keypair: senderKeypair } = await getWalletKey(runtime, true);\n      const connection = new Connection(\n        runtime.getSetting('SOLANA_RPC_URL') || 'https://api.mainnet-beta.solana.com'\n      );\n      const recipientPubkey = new PublicKey(content.recipient);\n\n      let signature: string;\n\n      // Handle SOL transfer\n      if (content.tokenAddress === null) {\n        const lamports = Number(content.amount) * 1e9;\n\n        const instruction = SystemProgram.transfer({\n          fromPubkey: senderKeypair.publicKey,\n          toPubkey: recipientPubkey,\n          lamports,\n        });\n\n        const messageV0 = new TransactionMessage({\n          payerKey: senderKeypair.publicKey,\n          recentBlockhash: (await connection.getLatestBlockhash()).blockhash,\n          instructions: [instruction],\n        }).compileToV0Message();\n\n        const transaction = new VersionedTransaction(messageV0);\n        transaction.sign([senderKeypair]);\n\n        signature = await connection.sendTransaction(transaction);\n\n        if (callback) {\n          callback({\n            text: `Sent ${content.amount} SOL. Transaction hash: ${signature}`,\n            content: {\n              success: true,\n              signature,\n              amount: content.amount,\n              recipient: content.recipient,\n            },\n          });\n        }\n      }\n      // Handle SPL token transfer\n      else {\n        const mintPubkey = new PublicKey(content.tokenAddress);\n        const mintInfo = await connection.getParsedAccountInfo(mintPubkey);\n        const decimals =\n          (mintInfo.value?.data as { parsed: { info: { decimals: number } } })?.parsed?.info\n            ?.decimals ?? 9;\n        const adjustedAmount = BigInt(Number(content.amount) * 10 ** decimals);\n\n        const senderATA = getAssociatedTokenAddressSync(mintPubkey, senderKeypair.publicKey);\n        const recipientATA = getAssociatedTokenAddressSync(mintPubkey, recipientPubkey);\n\n        const instructions = [];\n\n        const recipientATAInfo = await connection.getAccountInfo(recipientATA);\n        if (!recipientATAInfo) {\n          instructions.push(\n            createAssociatedTokenAccountInstruction(\n              senderKeypair.publicKey,\n              recipientATA,\n              recipientPubkey,\n              mintPubkey\n            )\n          );\n        }\n\n        instructions.push(\n          createTransferInstruction(\n            senderATA,\n            recipientATA,\n            senderKeypair.publicKey,\n            adjustedAmount\n          )\n        );\n\n        const messageV0 = new TransactionMessage({\n          payerKey: senderKeypair.publicKey,\n          recentBlockhash: (await connection.getLatestBlockhash()).blockhash,\n          instructions,\n        }).compileToV0Message();\n\n        const transaction = new VersionedTransaction(messageV0);\n        transaction.sign([senderKeypair]);\n\n        signature = await connection.sendTransaction(transaction);\n\n        if (callback) {\n          callback({\n            text: `Sent ${content.amount} tokens to ${content.recipient}\\nTransaction hash: ${signature}`,\n            content: {\n              success: true,\n              signature,\n              amount: content.amount,\n              recipient: content.recipient,\n            },\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('Error during transfer:', error);\n      if (callback) {\n        callback({\n          text: `Transfer failed: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Send 1.5 SOL to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Sending SOL now...',\n          actions: ['TRANSFER_SOLANA'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Send 69 $DEGENAI BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Sending the tokens now...',\n          actions: ['TRANSFER_SOLANA'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import type { IAgentRuntime, Memory, Provider, State } from '@elizaos/core';\nimport BigNumber from 'bignumber.js';\nimport { SOLANA_WALLET_DATA_CACHE_KEY } from '../constants';\nimport type { WalletPortfolio } from '../types';\n\n// Define the ProviderResult interface if not already imported\n/**\n * Represents the result returned by a provider.\n * @typedef {Object} ProviderResult\n * @property {any} [data] - The data associated with the result.\n * @property {Record<string, string>} [values] - The values stored in key-value pairs.\n * @property {string} [text] - The text content of the result.\n */\ninterface ProviderResult {\n  data?: any;\n  values?: Record<string, string>;\n  text?: string;\n}\n\n/**\n * Wallet provider for Solana.\n * @param {IAgentRuntime} runtime - The agent runtime.\n * @param {Memory} _message - The memory message.\n * @param {State} [state] - Optional state parameter.\n * @returns {Promise<ProviderResult>} The result of the wallet provider.\n */\nexport const walletProvider: Provider = {\n  name: 'solana-wallet',\n  description: 'your solana wallet information',\n  // it's not slow we always have this data\n  // but we don't always need this data, let's free up the context\n  dynamic: true,\n  get: async (runtime: IAgentRuntime, _message: Memory, state?: State): Promise<ProviderResult> => {\n    try {\n      const portfolioCache = await runtime.getCache<WalletPortfolio>(SOLANA_WALLET_DATA_CACHE_KEY);\n      if (!portfolioCache) {\n        return { data: null, values: {}, text: '' };\n      }\n\n      // hard coding service name, ugh\n      const solanaService = runtime.getService('solana');\n      let pubkeyStr = '';\n      // why wouldn't this exist? it's in the same plugin...\n      if (solanaService) {\n        pubkeyStr = ' (' + solanaService.publicKey.toBase58() + ')';\n      }\n\n      const portfolio = portfolioCache;\n      const agentName = state?.agentName || runtime.character.name || 'The agent';\n\n      // Values that can be injected into templates\n      const values: Record<string, string> = {\n        total_usd: new BigNumber(portfolio.totalUsd).toFixed(2),\n        total_sol: portfolio.totalSol.toString(),\n      };\n\n      // Add token balances to values\n      portfolio.items.forEach((item, index) => {\n        if (new BigNumber(item.uiAmount).isGreaterThan(0)) {\n          values[`token_${index}_name`] = item.name;\n          values[`token_${index}_symbol`] = item.symbol;\n          values[`token_${index}_amount`] = new BigNumber(item.uiAmount).toFixed(6);\n          values[`token_${index}_usd`] = new BigNumber(item.valueUsd).toFixed(2);\n          values[`token_${index}_sol`] = item.valueSol.toString();\n        }\n      });\n\n      // Add market prices to values\n      if (portfolio.prices) {\n        values.sol_price = new BigNumber(portfolio.prices.solana.usd).toFixed(2);\n        values.btc_price = new BigNumber(portfolio.prices.bitcoin.usd).toFixed(2);\n        values.eth_price = new BigNumber(portfolio.prices.ethereum.usd).toFixed(2);\n      }\n\n      // Format the text output\n      let text = `\\n\\n${agentName}'s Main Solana Wallet${pubkeyStr}\\n`;\n      text += `Total Value: $${values.total_usd} (${values.total_sol} SOL)\\n\\n`;\n\n      // Token Balances\n      text += 'Token Balances:\\n';\n      const nonZeroItems = portfolio.items.filter((item) =>\n        new BigNumber(item.uiAmount).isGreaterThan(0)\n      );\n\n      if (nonZeroItems.length === 0) {\n        text += 'No tokens found with non-zero balance\\n';\n      } else {\n        for (const item of nonZeroItems) {\n          const valueUsd = new BigNumber(item.valueUsd).toFixed(2);\n          text += `${item.name} (${item.symbol}): ${new BigNumber(item.uiAmount).toFixed(\n            6\n          )} ($${valueUsd} | ${item.valueSol} SOL)\\n`;\n        }\n      }\n\n      // Market Prices\n      if (portfolio.prices) {\n        text += '\\nMarket Prices:\\n';\n        text += `SOL: $${values.sol_price}\\n`;\n        text += `BTC: $${values.btc_price}\\n`;\n        text += `ETH: $${values.eth_price}\\n`;\n      }\n\n      return {\n        data: portfolio,\n        values: values,\n        text: text,\n      };\n    } catch (error) {\n      console.error('Error in Solana wallet provider:', error);\n      return { data: null, values: {}, text: '' };\n    }\n  },\n};\n","import { type IAgentRuntime, Service, logger } from '@elizaos/core';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { SOLANA_SERVICE_NAME, SOLANA_WALLET_DATA_CACHE_KEY } from './constants';\nimport { getWalletKey } from './keypairUtils';\nimport type { Item, Prices, WalletPortfolio } from './types';\n\nconst PROVIDER_CONFIG = {\n  BIRDEYE_API: 'https://public-api.birdeye.so',\n  MAX_RETRIES: 3,\n  RETRY_DELAY: 2000,\n  DEFAULT_RPC: 'https://api.mainnet-beta.solana.com',\n  TOKEN_ADDRESSES: {\n    SOL: 'So11111111111111111111111111111111111111112',\n    BTC: '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh',\n    ETH: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',\n  },\n};\n\n/**\n * Service class for interacting with the Solana blockchain and accessing wallet data.\n * @extends Service\n */\nexport class SolanaService extends Service {\n  static serviceType: string = SOLANA_SERVICE_NAME;\n  capabilityDescription =\n    'The agent is able to interact with the Solana blockchain, and has access to the wallet data';\n\n  private updateInterval: NodeJS.Timer | null = null;\n  private lastUpdate = 0;\n  private readonly UPDATE_INTERVAL = 120000; // 2 minutes\n  private connection: Connection;\n  private publicKey: PublicKey;\n\n  /**\n   * Constructor for creating an instance of the class.\n   * @param {IAgentRuntime} runtime - The runtime object that provides access to agent-specific functionality.\n   */\n  constructor(protected runtime: IAgentRuntime) {\n    super();\n    const connection = new Connection(\n      runtime.getSetting('SOLANA_RPC_URL') || PROVIDER_CONFIG.DEFAULT_RPC\n    );\n    this.connection = connection;\n    getWalletKey(runtime, false).then(({ publicKey }) => {\n      this.publicKey = publicKey;\n    });\n  }\n\n  /**\n   * Starts the Solana service with the given agent runtime.\n   *\n   * @param {IAgentRuntime} runtime - The agent runtime to use for the Solana service.\n   * @returns {Promise<SolanaService>} The initialized Solana service.\n   */\n  static async start(runtime: IAgentRuntime): Promise<SolanaService> {\n    logger.log('initSolanaService');\n\n    const solanaService = new SolanaService(runtime);\n\n    logger.log('SolanaService start');\n    if (solanaService.updateInterval) {\n      clearInterval(solanaService.updateInterval);\n    }\n\n    solanaService.updateInterval = setInterval(async () => {\n      logger.log('Updating wallet data');\n      await solanaService.updateWalletData();\n    }, solanaService.UPDATE_INTERVAL);\n\n    // Initial update\n    solanaService.updateWalletData().catch(console.error);\n\n    return solanaService;\n  }\n\n  /**\n   * Stops the Solana service.\n   *\n   * @param {IAgentRuntime} runtime - The agent runtime.\n   * @returns {Promise<void>} - A promise that resolves once the Solana service has stopped.\n   */\n  static async stop(runtime: IAgentRuntime) {\n    const client = runtime.getService(SOLANA_SERVICE_NAME);\n    if (!client) {\n      logger.error('SolanaService not found');\n      return;\n    }\n    await client.stop();\n  }\n\n  /**\n   * Stops the update interval if it is currently running.\n   * @returns {Promise<void>} A Promise that resolves when the update interval is stopped.\n   */\n  async stop(): Promise<void> {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n\n  /**\n   * Fetches data from the provided URL with retry logic.\n   * @param {string} url - The URL to fetch data from.\n   * @param {RequestInit} [options={}] - The options for the fetch request.\n   * @returns {Promise<unknown>} - A promise that resolves to the fetched data.\n   */\n  private async fetchWithRetry(url: string, options: RequestInit = {}): Promise<unknown> {\n    let lastError: Error;\n\n    for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n      try {\n        const response = await fetch(url, {\n          ...options,\n          headers: {\n            Accept: 'application/json',\n            'x-chain': 'solana',\n            'X-API-KEY': this.runtime.getSetting('BIRDEYE_API_KEY'),\n            ...options.headers,\n          },\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        logger.error(`Attempt ${i + 1} failed:`, error);\n        lastError = error;\n        if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n          await new Promise((resolve) => setTimeout(resolve, PROVIDER_CONFIG.RETRY_DELAY * 2 ** i));\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Asynchronously fetches the prices of SOL, BTC, and ETH tokens.\n   * Uses cache to store and retrieve prices if available.\n   * @returns A Promise that resolves to an object containing the prices of SOL, BTC, and ETH tokens.\n   */\n  private async fetchPrices(): Promise<Prices> {\n    const cacheKey = 'prices';\n    const cachedValue = await this.runtime.getCache<Prices>(cacheKey);\n\n    // if cachedValue is JSON, parse it\n    if (cachedValue) {\n      logger.log('Cache hit for fetchPrices');\n      return cachedValue;\n    }\n\n    logger.log('Cache miss for fetchPrices');\n    const { SOL, BTC, ETH } = PROVIDER_CONFIG.TOKEN_ADDRESSES;\n    const tokens = [SOL, BTC, ETH];\n    const prices: Prices = {\n      solana: { usd: '0' },\n      bitcoin: { usd: '0' },\n      ethereum: { usd: '0' },\n    };\n\n    for (const token of tokens) {\n      const response = await this.fetchWithRetry(\n        `${PROVIDER_CONFIG.BIRDEYE_API}/defi/price?address=${token}`\n      );\n\n      if (response?.data?.value) {\n        const price = response.data.value.toString();\n        prices[token === SOL ? 'solana' : token === BTC ? 'bitcoin' : 'ethereum'].usd = price;\n      }\n    }\n\n    await this.runtime.setCache<Prices>(cacheKey, prices);\n    return prices;\n  }\n\n  /**\n   * Asynchronously fetches token accounts for a specific owner.\n   *\n   * @returns {Promise<any[]>} A promise that resolves to an array of token accounts.\n   */\n  private async getTokenAccounts() {\n    try {\n      const accounts = await this.connection.getParsedTokenAccountsByOwner(this.publicKey, {\n        programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),\n      });\n      return accounts.value;\n    } catch (error) {\n      logger.error('Error fetching token accounts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Update wallet data including fetching wallet portfolio information, prices, and caching the data.\n   * @param {boolean} [force=false] - Whether to force update the wallet data even if the update interval has not passed\n   * @returns {Promise<WalletPortfolio>} The updated wallet portfolio information\n   */\n  private async updateWalletData(force = false): Promise<WalletPortfolio> {\n    const now = Date.now();\n\n    if (!this.publicKey) {\n      // can't be warn if we fire every start up\n      // maybe we just get the pubkey here proper\n      // or fall back to SOLANA_PUBLIC_KEY\n      logger.log('solana:::service::updateWalletData - no Public Key yet');\n      return {};\n    }\n\n    // Don't update if less than interval has passed, unless forced\n    if (!force && now - this.lastUpdate < this.UPDATE_INTERVAL) {\n      const cached = await this.getCachedData();\n      if (cached) return cached;\n    }\n\n    try {\n      // Try Birdeye API first\n      const birdeyeApiKey = this.runtime.getSetting('BIRDEYE_API_KEY');\n      if (birdeyeApiKey) {\n        const walletData = await this.fetchWithRetry(\n          `${PROVIDER_CONFIG.BIRDEYE_API}/v1/wallet/token_list?wallet=${this.publicKey.toBase58()}`\n        );\n\n        if (walletData?.success && walletData?.data) {\n          const data = walletData.data;\n          const totalUsd = new BigNumber(data.totalUsd.toString());\n          const prices = await this.fetchPrices();\n          const solPriceInUSD = new BigNumber(prices.solana.usd);\n\n          const portfolio: WalletPortfolio = {\n            totalUsd: totalUsd.toString(),\n            totalSol: totalUsd.div(solPriceInUSD).toFixed(6),\n            prices,\n            lastUpdated: now,\n            items: data.items.map((item: Item) => ({\n              ...item,\n              valueSol: new BigNumber(item.valueUsd || 0).div(solPriceInUSD).toFixed(6),\n              name: item.name || 'Unknown',\n              symbol: item.symbol || 'Unknown',\n              priceUsd: item.priceUsd || '0',\n              valueUsd: item.valueUsd || '0',\n            })),\n          };\n\n          await this.runtime.setCache<WalletPortfolio>(SOLANA_WALLET_DATA_CACHE_KEY, portfolio);\n          this.lastUpdate = now;\n          return portfolio;\n        }\n      }\n\n      // Fallback to basic token account info\n      const accounts = await this.getTokenAccounts();\n      const items: Item[] = accounts.map((acc) => ({\n        name: 'Unknown',\n        address: acc.account.data.parsed.info.mint,\n        symbol: 'Unknown',\n        decimals: acc.account.data.parsed.info.tokenAmount.decimals,\n        balance: acc.account.data.parsed.info.tokenAmount.amount,\n        uiAmount: acc.account.data.parsed.info.tokenAmount.uiAmount.toString(),\n        priceUsd: '0',\n        valueUsd: '0',\n        valueSol: '0',\n      }));\n\n      const portfolio: WalletPortfolio = {\n        totalUsd: '0',\n        totalSol: '0',\n        items,\n      };\n\n      await this.runtime.setCache<WalletPortfolio>(SOLANA_WALLET_DATA_CACHE_KEY, portfolio);\n      this.lastUpdate = now;\n      return portfolio;\n    } catch (error) {\n      logger.error('Error updating wallet data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves cached wallet portfolio data from the database adapter.\n   * @returns A promise that resolves with the cached WalletPortfolio data if available, otherwise resolves with null.\n   */\n  public async getCachedData(): Promise<WalletPortfolio | null> {\n    const cachedValue = await this.runtime.getCache<WalletPortfolio>(SOLANA_WALLET_DATA_CACHE_KEY);\n    if (cachedValue) {\n      return cachedValue;\n    }\n    return null;\n  }\n\n  /**\n   * Forces an update of the wallet data and returns the updated WalletPortfolio object.\n   * @returns A promise that resolves with the updated WalletPortfolio object.\n   */\n  public async forceUpdate(): Promise<WalletPortfolio> {\n    return await this.updateWalletData(true);\n  }\n\n  /**\n   * Retrieves the public key of the instance.\n   *\n   * @returns {PublicKey} The public key of the instance.\n   */\n  public getPublicKey(): PublicKey {\n    return this.publicKey;\n  }\n\n  /**\n   * Retrieves the connection object.\n   *\n   * @returns {Connection} The connection object.\n   */\n  public getConnection(): Connection {\n    return this.connection;\n  }\n}\n","import type { Plugin } from '@elizaos/core';\nimport { executeSwap } from './actions/swap';\nimport transferToken from './actions/transfer';\nimport { SOLANA_SERVICE_NAME } from './constants';\nimport { walletProvider } from './providers/wallet';\nimport { SolanaService } from './service';\n\nexport const solanaPlugin: Plugin = {\n  name: SOLANA_SERVICE_NAME,\n  description: 'Solana Plugin for Eliza',\n  actions: [transferToken, executeSwap],\n  evaluators: [],\n  providers: [walletProvider],\n  services: [SolanaService],\n};\nexport default solanaPlugin;\n"],"mappings":"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","names":["logger","PublicKey","PublicKey","logger","ModelType","composePromptFromState","logger","parseJSONObjectFromText","Connection","PublicKey","VersionedTransaction","logger","composePromptFromState","ModelType","parseJSONObjectFromText","Connection","PublicKey","VersionedTransaction","BigNumber","BigNumber","logger","Connection","PublicKey","BigNumber","Connection","logger","PublicKey","BigNumber","portfolio"]}