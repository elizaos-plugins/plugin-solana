{"version":3,"sources":["../src/actions/swap.ts","../src/keypairUtils.ts","../src/providers/wallet.ts","../src/actions/swapUtils.ts","../src/actions/takeOrder.ts","../src/actions/pumpfun.ts","../src/actions/fomo.ts","../src/actions/swapDao.ts","../src/actions/transfer.ts","../src/evaluators/trust.ts","../src/providers/token.ts","../src/bignumber.ts","../src/providers/tokenUtils.ts","../src/index.ts"],"sourcesContent":["import {\n    ActionExample,\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    settings,\n    State,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Connection, PublicKey, VersionedTransaction } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { getWalletKey } from \"../keypairUtils.ts\";\nimport { walletProvider, WalletProvider } from \"../providers/wallet.ts\";\nimport { getTokenDecimals } from \"./swapUtils.ts\";\n\nasync function swapToken(\n    connection: Connection,\n    walletPublicKey: PublicKey,\n    inputTokenCA: string,\n    outputTokenCA: string,\n    amount: number\n): Promise<any> {\n    try {\n        // Get the decimals for the input token\n        const decimals =\n            inputTokenCA === settings.SOL_ADDRESS\n                ? new BigNumber(9)\n                : new BigNumber(\n                      await getTokenDecimals(connection, inputTokenCA)\n                  );\n\n        elizaLogger.log(\"Decimals:\", decimals.toString());\n\n        // Use BigNumber for adjustedAmount: amount * (10 ** decimals)\n        const amountBN = new BigNumber(amount);\n        const adjustedAmount = amountBN.multipliedBy(\n            new BigNumber(10).pow(decimals)\n        );\n\n        elizaLogger.log(\"Fetching quote with params:\", {\n            inputMint: inputTokenCA,\n            outputMint: outputTokenCA,\n            amount: adjustedAmount,\n        });\n\n        const quoteResponse = await fetch(\n            `https://quote-api.jup.ag/v6/quote?inputMint=${inputTokenCA}&outputMint=${outputTokenCA}&amount=${adjustedAmount}&dynamicSlippage=true&maxAccounts=64`\n        );\n        const quoteData = await quoteResponse.json();\n\n        if (!quoteData || quoteData.error) {\n            elizaLogger.error(\"Quote error:\", quoteData);\n            throw new Error(\n                `Failed to get quote: ${quoteData?.error || \"Unknown error\"}`\n            );\n        }\n\n        elizaLogger.log(\"Quote received:\", quoteData);\n\n        const swapRequestBody = {\n            quoteResponse: quoteData,\n            userPublicKey: walletPublicKey.toBase58(),\n            dynamicComputeUnitLimit: true,\n            dynamicSlippage: true,\n            priorityLevelWithMaxLamports: {\n                maxLamports: 4000000,\n                priorityLevel: \"veryHigh\",\n            },\n        };\n\n        elizaLogger.log(\"Requesting swap with body:\", swapRequestBody);\n\n        const swapResponse = await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(swapRequestBody),\n        });\n\n        const swapData = await swapResponse.json();\n\n        if (!swapData || !swapData.swapTransaction) {\n            elizaLogger.error(\"Swap error:\", swapData);\n            throw new Error(\n                `Failed to get swap transaction: ${swapData?.error || \"No swap transaction returned\"}`\n            );\n        }\n\n        elizaLogger.log(\"Swap transaction received\");\n        return swapData;\n    } catch (error) {\n        elizaLogger.error(\"Error in swapToken:\", error);\n        throw error;\n    }\n}\n\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"inputTokenSymbol\": \"SOL\",\n    \"outputTokenSymbol\": \"USDC\",\n    \"inputTokenCA\": \"So11111111111111111111111111111111111111112\",\n    \"outputTokenCA\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"amount\": 1.5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol (the token being sold)\n- Output token symbol (the token being bought)\n- Input token contract address if provided\n- Output token contract address if provided\n- Amount to swap\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n\\`\\`\\`json\n{\n    \"inputTokenSymbol\": string | null,\n    \"outputTokenSymbol\": string | null,\n    \"inputTokenCA\": string | null,\n    \"outputTokenCA\": string | null,\n    \"amount\": number | string | null\n}\n\\`\\`\\``;\n\n// if we get the token symbol but not the CA, check walet for matching token, and if we have, get the CA for it\n\n// get all the tokens in the wallet using the wallet provider\nasync function getTokensInWallet(runtime: IAgentRuntime) {\n    const { publicKey } = await getWalletKey(runtime, false);\n    const walletProvider = new WalletProvider(\n        new Connection(\"https://api.mainnet-beta.solana.com\"),\n        publicKey\n    );\n\n    const walletInfo = await walletProvider.fetchPortfolioValue(runtime);\n    const items = walletInfo.items;\n    return items;\n}\n\n// check if the token symbol is in the wallet\nasync function getTokenFromWallet(runtime: IAgentRuntime, tokenSymbol: string) {\n    try {\n        const items = await getTokensInWallet(runtime);\n        const token = items.find((item) => item.symbol === tokenSymbol);\n\n        if (token) {\n            return token.address;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        elizaLogger.error(\"Error checking token in wallet:\", error);\n        return null;\n    }\n}\n\n// swapToken should took CA, not symbol\n\nexport const executeSwap: Action = {\n    name: \"EXECUTE_SWAP\",\n    similes: [\"SWAP_TOKENS\", \"TOKEN_SWAP\", \"TRADE_TOKENS\", \"EXCHANGE_TOKENS\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Check if the necessary parameters are provided in the message\n        elizaLogger.log(\"Message:\", message);\n        return true;\n    },\n    description: \"Perform a token swap.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        // composeState\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const walletInfo = await walletProvider.get(runtime, message, state);\n\n        state.walletInfo = walletInfo;\n\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        elizaLogger.log(\"Response:\", response);\n        // const type = response.inputTokenSymbol?.toUpperCase() === \"SOL\" ? \"buy\" : \"sell\";\n\n        // Add SOL handling logic\n        if (response.inputTokenSymbol?.toUpperCase() === \"SOL\") {\n            response.inputTokenCA = settings.SOL_ADDRESS;\n        }\n        if (response.outputTokenSymbol?.toUpperCase() === \"SOL\") {\n            response.outputTokenCA = settings.SOL_ADDRESS;\n        }\n\n        // if both contract addresses are set, lets execute the swap\n        // TODO: try to resolve CA from symbol based on existing symbol in wallet\n        if (!response.inputTokenCA && response.inputTokenSymbol) {\n            elizaLogger.log(\n                `Attempting to resolve CA for input token symbol: ${response.inputTokenSymbol}`\n            );\n            response.inputTokenCA = await getTokenFromWallet(\n                runtime,\n                response.inputTokenSymbol\n            );\n            if (response.inputTokenCA) {\n                elizaLogger.log(\n                    `Resolved inputTokenCA: ${response.inputTokenCA}`\n                );\n            } else {\n                elizaLogger.log(\n                    \"No contract addresses provided, skipping swap\"\n                );\n                const responseMsg = {\n                    text: \"I need the contract addresses to perform the swap\",\n                };\n                callback?.(responseMsg);\n                return true;\n            }\n        }\n\n        if (!response.outputTokenCA && response.outputTokenSymbol) {\n            elizaLogger.log(\n                `Attempting to resolve CA for output token symbol: ${response.outputTokenSymbol}`\n            );\n            response.outputTokenCA = await getTokenFromWallet(\n                runtime,\n                response.outputTokenSymbol\n            );\n            if (response.outputTokenCA) {\n                elizaLogger.log(\n                    `Resolved outputTokenCA: ${response.outputTokenCA}`\n                );\n            } else {\n                elizaLogger.log(\n                    \"No contract addresses provided, skipping swap\"\n                );\n                const responseMsg = {\n                    text: \"I need the contract addresses to perform the swap\",\n                };\n                callback?.(responseMsg);\n                return true;\n            }\n        }\n\n        if (!response.amount) {\n            elizaLogger.log(\"No amount provided, skipping swap\");\n            const responseMsg = {\n                text: \"I need the amount to perform the swap\",\n            };\n            callback?.(responseMsg);\n            return true;\n        }\n\n        // TODO: if response amount is half, all, etc, semantically retrieve amount and return as number\n        if (!response.amount) {\n            elizaLogger.log(\"Amount is not a number, skipping swap\");\n            const responseMsg = {\n                text: \"The amount must be a number\",\n            };\n            callback?.(responseMsg);\n            return true;\n        }\n        try {\n            const connection = new Connection(\n                \"https://api.mainnet-beta.solana.com\"\n            );\n            const { publicKey: walletPublicKey } = await getWalletKey(\n                runtime,\n                false\n            );\n\n            // const provider = new WalletProvider(connection, walletPublicKey);\n\n            elizaLogger.log(\"Wallet Public Key:\", walletPublicKey);\n            elizaLogger.log(\"inputTokenSymbol:\", response.inputTokenCA);\n            elizaLogger.log(\"outputTokenSymbol:\", response.outputTokenCA);\n            elizaLogger.log(\"amount:\", response.amount);\n\n            const swapResult = await swapToken(\n                connection,\n                walletPublicKey,\n                response.inputTokenCA as string,\n                response.outputTokenCA as string,\n                response.amount as number\n            );\n\n            elizaLogger.log(\"Deserializing transaction...\");\n            const transactionBuf = Buffer.from(\n                swapResult.swapTransaction,\n                \"base64\"\n            );\n            const transaction =\n                VersionedTransaction.deserialize(transactionBuf);\n\n            elizaLogger.log(\"Preparing to sign transaction...\");\n\n            elizaLogger.log(\"Creating keypair...\");\n            const { keypair } = await getWalletKey(runtime, true);\n            // Verify the public key matches what we expect\n            if (keypair.publicKey.toBase58() !== walletPublicKey.toBase58()) {\n                throw new Error(\n                    \"Generated public key doesn't match expected public key\"\n                );\n            }\n\n            elizaLogger.log(\"Signing transaction...\");\n            transaction.sign([keypair]);\n\n            elizaLogger.log(\"Sending transaction...\");\n\n            const latestBlockhash = await connection.getLatestBlockhash();\n\n            const txid = await connection.sendTransaction(transaction, {\n                skipPreflight: false,\n                maxRetries: 3,\n                preflightCommitment: \"confirmed\",\n            });\n\n            elizaLogger.log(\"Transaction sent:\", txid);\n\n            // Confirm transaction using the blockhash\n            const confirmation = await connection.confirmTransaction(\n                {\n                    signature: txid,\n                    blockhash: latestBlockhash.blockhash,\n                    lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n                },\n                \"confirmed\"\n            );\n\n            if (confirmation.value.err) {\n                throw new Error(\n                    `Transaction failed: ${confirmation.value.err}`\n                );\n            }\n\n            if (confirmation.value.err) {\n                throw new Error(\n                    `Transaction failed: ${confirmation.value.err}`\n                );\n            }\n\n            elizaLogger.log(\"Swap completed successfully!\");\n            elizaLogger.log(`Transaction ID: ${txid}`);\n\n            const responseMsg = {\n                text: `Swap completed successfully! Transaction ID: ${txid}`,\n            };\n\n            callback?.(responseMsg);\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token swap:\", error);\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    inputTokenSymbol: \"SOL\",\n                    outputTokenSymbol: \"USDC\",\n                    amount: 0.1,\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swapping 0.1 SOL for USDC...\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swap completed successfully! Transaction ID: ...\",\n                },\n            },\n        ],\n        // Add more examples as needed\n    ] as ActionExample[][],\n} as Action;\n","import { Keypair, PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport { IAgentRuntime, elizaLogger } from \"@elizaos/core\";\n\nexport interface KeypairResult {\n    keypair?: Keypair;\n    publicKey?: PublicKey;\n}\n\n/**\n * Gets either a keypair or public key based on TEE mode and runtime settings\n * @param runtime The agent runtime\n * @param requirePrivateKey Whether to return a full keypair (true) or just public key (false)\n * @returns KeypairResult containing either keypair or public key\n */\nexport async function getWalletKey(\n    runtime: IAgentRuntime,\n    requirePrivateKey: boolean = true\n): Promise<KeypairResult> {\n\n    // TEE mode is OFF\n    if (requirePrivateKey) {\n        const privateKeyString =\n            runtime.getSetting(\"SOLANA_PRIVATE_KEY\");\n\n        if (!privateKeyString) {\n            throw new Error(\"Private key not found in settings\");\n        }\n\n        try {\n            // First try base58\n            const secretKey = bs58.decode(privateKeyString);\n            return { keypair: Keypair.fromSecretKey(secretKey) };\n        } catch (e) {\n            elizaLogger.log(\"Error decoding base58 private key:\", e);\n            try {\n                // Then try base64\n                elizaLogger.log(\"Try decoding base64 instead\");\n                const secretKey = Uint8Array.from(\n                    Buffer.from(privateKeyString, \"base64\")\n                );\n                return { keypair: Keypair.fromSecretKey(secretKey) };\n            } catch (e2) {\n                elizaLogger.error(\"Error decoding private key: \", e2);\n                throw new Error(\"Invalid private key format\");\n            }\n        }\n    } else {\n        const publicKeyString =\n            runtime.getSetting(\"SOLANA_PUBLIC_KEY\");\n\n        if (!publicKeyString) {\n            throw new Error(\"Public key not found in settings\");\n        }\n\n        return { publicKey: new PublicKey(publicKeyString) };\n    }\n}\n","import {\n    IAgentRuntime,\n    Memory,\n    Provider,\n    State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport NodeCache from \"node-cache\";\nimport { getWalletKey } from \"../keypairUtils\";\n\n// Provider configuration\nconst PROVIDER_CONFIG = {\n    BIRDEYE_API: \"https://public-api.birdeye.so\",\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    DEFAULT_RPC: \"https://api.mainnet-beta.solana.com\",\n    GRAPHQL_ENDPOINT: \"https://graph.codex.io/graphql\",\n    TOKEN_ADDRESSES: {\n        SOL: \"So11111111111111111111111111111111111111112\",\n        BTC: \"3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh\",\n        ETH: \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n    },\n};\n\nexport interface Item {\n    name: string;\n    address: string;\n    symbol: string;\n    decimals: number;\n    balance: string;\n    uiAmount: string;\n    priceUsd: string;\n    valueUsd: string;\n    valueSol?: string;\n}\n\ninterface WalletPortfolio {\n    totalUsd: string;\n    totalSol?: string;\n    items: Array<Item>;\n}\n\ninterface _BirdEyePriceData {\n    data: {\n        [key: string]: {\n            price: number;\n            priceChange24h: number;\n        };\n    };\n}\n\ninterface Prices {\n    solana: { usd: string };\n    bitcoin: { usd: string };\n    ethereum: { usd: string };\n}\n\nexport class WalletProvider {\n    private cache: NodeCache;\n\n    constructor(\n        private connection: Connection,\n        private walletPublicKey: PublicKey\n    ) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\n    }\n\n    private async fetchWithRetry(\n        runtime,\n        url: string,\n        options: RequestInit = {}\n    ): Promise<any> {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const response = await fetch(url, {\n                    ...options,\n                    headers: {\n                        Accept: \"application/json\",\n                        \"x-chain\": \"solana\",\n                        \"X-API-KEY\":\n                            runtime.getSetting(\"BIRDEYE_API_KEY\", \"\") || \"\",\n                        ...options.headers,\n                    },\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(\n                        `HTTP error! status: ${response.status}, message: ${errorText}`\n                    );\n                }\n\n                const data = await response.json();\n                return data;\n            } catch (error) {\n                elizaLogger.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    const delay = PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i);\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n            }\n        }\n\n        elizaLogger.error(\n            \"All attempts failed. Throwing the last error:\",\n            lastError\n        );\n        throw lastError;\n    }\n\n    async fetchPortfolioValue(runtime): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.walletPublicKey.toBase58()}`;\n            const cachedValue = this.cache.get<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                elizaLogger.log(\"Cache hit for fetchPortfolioValue\");\n                return cachedValue;\n            }\n            elizaLogger.log(\"Cache miss for fetchPortfolioValue\");\n\n            // Check if Birdeye API key is available\n            const birdeyeApiKey = runtime.getSetting(\"BIRDEYE_API_KEY\");\n\n            if (birdeyeApiKey) {\n                // Existing Birdeye API logic\n                const walletData = await this.fetchWithRetry(\n                    runtime,\n                    `${PROVIDER_CONFIG.BIRDEYE_API}/v1/wallet/token_list?wallet=${this.walletPublicKey.toBase58()}`\n                );\n\n                if (walletData?.success && walletData?.data) {\n                    const data = walletData.data;\n                    const totalUsd = new BigNumber(data.totalUsd.toString());\n                    const prices = await this.fetchPrices(runtime);\n                    const solPriceInUSD = new BigNumber(\n                        prices.solana.usd.toString()\n                    );\n\n                    const items = data.items.map((item: any) => ({\n                        ...item,\n                        valueSol: new BigNumber(item.valueUsd || 0)\n                            .div(solPriceInUSD)\n                            .toFixed(6),\n                        name: item.name || \"Unknown\",\n                        symbol: item.symbol || \"Unknown\",\n                        priceUsd: item.priceUsd || \"0\",\n                        valueUsd: item.valueUsd || \"0\",\n                    }));\n\n                    const portfolio = {\n                        totalUsd: totalUsd.toString(),\n                        totalSol: totalUsd.div(solPriceInUSD).toFixed(6),\n                        items: items.sort((a, b) =>\n                            new BigNumber(b.valueUsd)\n                                .minus(new BigNumber(a.valueUsd))\n                                .toNumber()\n                        ),\n                    };\n\n                    this.cache.set(cacheKey, portfolio);\n                    return portfolio;\n                }\n            }\n\n            // Fallback to basic token account info if no Birdeye API key or API call fails\n            const accounts = await this.getTokenAccounts(\n                this.walletPublicKey.toBase58()\n            );\n\n            const items = accounts.map((acc) => ({\n                name: \"Unknown\",\n                address: acc.account.data.parsed.info.mint,\n                symbol: \"Unknown\",\n                decimals: acc.account.data.parsed.info.tokenAmount.decimals,\n                balance: acc.account.data.parsed.info.tokenAmount.amount,\n                uiAmount:\n                    acc.account.data.parsed.info.tokenAmount.uiAmount.toString(),\n                priceUsd: \"0\",\n                valueUsd: \"0\",\n                valueSol: \"0\",\n            }));\n\n            const portfolio = {\n                totalUsd: \"0\",\n                totalSol: \"0\",\n                items,\n            };\n\n            this.cache.set(cacheKey, portfolio);\n            return portfolio;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    async fetchPortfolioValueCodex(runtime): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.walletPublicKey.toBase58()}`;\n            const cachedValue = await this.cache.get<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                elizaLogger.log(\"Cache hit for fetchPortfolioValue\");\n                return cachedValue;\n            }\n            elizaLogger.log(\"Cache miss for fetchPortfolioValue\");\n\n            const query = `\n              query Balances($walletId: String!, $cursor: String) {\n                balances(input: { walletId: $walletId, cursor: $cursor }) {\n                  cursor\n                  items {\n                    walletId\n                    tokenId\n                    balance\n                    shiftedBalance\n                  }\n                }\n              }\n            `;\n\n            const variables = {\n                walletId: `${this.walletPublicKey.toBase58()}:${1399811149}`,\n                cursor: null,\n            };\n\n            const response = await fetch(PROVIDER_CONFIG.GRAPHQL_ENDPOINT, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization:\n                        runtime.getSetting(\"CODEX_API_KEY\", \"\") || \"\",\n                },\n                body: JSON.stringify({\n                    query,\n                    variables,\n                }),\n            }).then((res) => res.json());\n\n            const data = response.data?.data?.balances?.items;\n\n            if (!data || data.length === 0) {\n                elizaLogger.error(\"No portfolio data available\", data);\n                throw new Error(\"No portfolio data available\");\n            }\n\n            // Fetch token prices\n            const prices = await this.fetchPrices(runtime);\n            const solPriceInUSD = new BigNumber(prices.solana.usd.toString());\n\n            // Reformat items\n            const items: Item[] = data.map((item: any) => {\n                return {\n                    name: \"Unknown\",\n                    address: item.tokenId.split(\":\")[0],\n                    symbol: item.tokenId.split(\":\")[0],\n                    decimals: 6,\n                    balance: item.balance,\n                    uiAmount: item.shiftedBalance.toString(),\n                    priceUsd: \"\",\n                    valueUsd: \"\",\n                    valueSol: \"\",\n                };\n            });\n\n            // Calculate total portfolio value\n            const totalUsd = items.reduce(\n                (sum, item) => sum.plus(new BigNumber(item.valueUsd)),\n                new BigNumber(0)\n            );\n\n            const totalSol = totalUsd.div(solPriceInUSD);\n\n            const portfolio: WalletPortfolio = {\n                totalUsd: totalUsd.toFixed(6),\n                totalSol: totalSol.toFixed(6),\n                items: items.sort((a, b) =>\n                    new BigNumber(b.valueUsd)\n                        .minus(new BigNumber(a.valueUsd))\n                        .toNumber()\n                ),\n            };\n\n            // Cache the portfolio for future requests\n            await this.cache.set(cacheKey, portfolio, 60 * 1000); // Cache for 1 minute\n\n            return portfolio;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    async fetchPrices(runtime): Promise<Prices> {\n        try {\n            const cacheKey = \"prices\";\n            const cachedValue = this.cache.get<Prices>(cacheKey);\n\n            if (cachedValue) {\n                elizaLogger.log(\"Cache hit for fetchPrices\");\n                return cachedValue;\n            }\n            elizaLogger.log(\"Cache miss for fetchPrices\");\n\n            const { SOL, BTC, ETH } = PROVIDER_CONFIG.TOKEN_ADDRESSES;\n            const tokens = [SOL, BTC, ETH];\n            const prices: Prices = {\n                solana: { usd: \"0\" },\n                bitcoin: { usd: \"0\" },\n                ethereum: { usd: \"0\" },\n            };\n\n            for (const token of tokens) {\n                const response = await this.fetchWithRetry(\n                    runtime,\n                    `${PROVIDER_CONFIG.BIRDEYE_API}/defi/price?address=${token}`,\n                    {\n                        headers: {\n                            \"x-chain\": \"solana\",\n                        },\n                    }\n                );\n\n                if (response?.data?.value) {\n                    const price = response.data.value.toString();\n                    prices[\n                        token === SOL\n                            ? \"solana\"\n                            : token === BTC\n                              ? \"bitcoin\"\n                              : \"ethereum\"\n                    ].usd = price;\n                } else {\n                    elizaLogger.warn(\n                        `No price data available for token: ${token}`\n                    );\n                }\n            }\n\n            this.cache.set(cacheKey, prices);\n            return prices;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching prices:\", error);\n            throw error;\n        }\n    }\n\n    formatPortfolio(\n        runtime,\n        portfolio: WalletPortfolio,\n        prices: Prices\n    ): string {\n        let output = `${runtime.character.description}\\n`;\n        output += `Wallet Address: ${this.walletPublicKey.toBase58()}\\n\\n`;\n\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\n        const totalSolFormatted = portfolio.totalSol;\n\n        output += `Total Value: $${totalUsdFormatted} (${totalSolFormatted} SOL)\\n\\n`;\n        output += \"Token Balances:\\n\";\n\n        const nonZeroItems = portfolio.items.filter((item) =>\n            new BigNumber(item.uiAmount).isGreaterThan(0)\n        );\n\n        if (nonZeroItems.length === 0) {\n            output += \"No tokens found with non-zero balance\\n\";\n        } else {\n            for (const item of nonZeroItems) {\n                const valueUsd = new BigNumber(item.valueUsd).toFixed(2);\n                output += `${item.name} (${item.symbol}): ${new BigNumber(\n                    item.uiAmount\n                ).toFixed(6)} ($${valueUsd} | ${item.valueSol} SOL)\\n`;\n            }\n        }\n\n        output += \"\\nMarket Prices:\\n\";\n        output += `SOL: $${new BigNumber(prices.solana.usd).toFixed(2)}\\n`;\n        output += `BTC: $${new BigNumber(prices.bitcoin.usd).toFixed(2)}\\n`;\n        output += `ETH: $${new BigNumber(prices.ethereum.usd).toFixed(2)}\\n`;\n\n        return output;\n    }\n\n    async getFormattedPortfolio(runtime): Promise<string> {\n        try {\n            const [portfolio, prices] = await Promise.all([\n                this.fetchPortfolioValue(runtime),\n                this.fetchPrices(runtime),\n            ]);\n\n            return this.formatPortfolio(runtime, portfolio, prices);\n        } catch (error) {\n            elizaLogger.error(\"Error generating portfolio report:\", error);\n            return \"Unable to fetch wallet information. Please try again later.\";\n        }\n    }\n\n    private async getTokenAccounts(walletAddress: string) {\n        try {\n            const accounts =\n                await this.connection.getParsedTokenAccountsByOwner(\n                    new PublicKey(walletAddress),\n                    {\n                        programId: new PublicKey(\n                            \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n                        ),\n                    }\n                );\n            return accounts.value;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching token accounts:\", error);\n            return [];\n        }\n    }\n}\n\nconst walletProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        try {\n            const { publicKey } = await getWalletKey(runtime, false);\n\n            const connection = new Connection(\n                runtime.getSetting(\"SOLANA_RPC_URL\") ||\n                    PROVIDER_CONFIG.DEFAULT_RPC\n            );\n\n            const provider = new WalletProvider(connection, publicKey);\n\n            return await provider.getFormattedPortfolio(runtime);\n        } catch (error) {\n            elizaLogger.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    },\n};\n\n// Module exports\nexport { walletProvider };\n","import { getAssociatedTokenAddress } from \"@solana/spl-token\";\nimport {\n    BlockhashWithExpiryBlockHeight,\n    Connection,\n    Keypair,\n    PublicKey,\n    RpcResponseAndContext,\n    SimulatedTransactionResponse,\n    TokenAmount,\n    VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { settings, elizaLogger } from \"@elizaos/core\";\n\nconst solAddress = settings.SOL_ADDRESS;\nconst SLIPPAGE = settings.SLIPPAGE;\nconst connection = new Connection(\n    settings.SOLANA_RPC_URL || \"https://api.mainnet-beta.solana.com\"\n);\nconst delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport async function delayedCall<T>(\n    method: (...args: any[]) => Promise<T>,\n    ...args: any[]\n): Promise<T> {\n    await delay(150);\n    return method(...args);\n}\n\nexport async function getTokenDecimals(\n    connection: Connection,\n    mintAddress: string\n): Promise<number> {\n    const mintPublicKey = new PublicKey(mintAddress);\n    const tokenAccountInfo =\n        await connection.getParsedAccountInfo(mintPublicKey);\n\n    // Check if the data is parsed and contains the expected structure\n    if (\n        tokenAccountInfo.value &&\n        typeof tokenAccountInfo.value.data === \"object\" &&\n        \"parsed\" in tokenAccountInfo.value.data\n    ) {\n        const parsedInfo = tokenAccountInfo.value.data.parsed?.info;\n        if (parsedInfo && typeof parsedInfo.decimals === \"number\") {\n            return parsedInfo.decimals;\n        }\n    }\n\n    throw new Error(\"Unable to fetch token decimals\");\n}\n\nexport async function getQuote(\n    connection: Connection,\n    baseToken: string,\n    outputToken: string,\n    amount: number\n): Promise<any> {\n    const decimals = await getTokenDecimals(connection, baseToken);\n    const adjustedAmount = amount * 10 ** decimals;\n\n    const quoteResponse = await fetch(\n        `https://quote-api.jup.ag/v6/quote?inputMint=${baseToken}&outputMint=${outputToken}&amount=${adjustedAmount}&slippageBps=50`\n    );\n    const swapTransaction = await quoteResponse.json();\n    const swapTransactionBuf = Buffer.from(swapTransaction, \"base64\");\n    return new Uint8Array(swapTransactionBuf);\n}\n\nexport const executeSwap = async (\n    transaction: VersionedTransaction,\n    type: \"buy\" | \"sell\"\n) => {\n    try {\n        const latestBlockhash: BlockhashWithExpiryBlockHeight =\n            await delayedCall(connection.getLatestBlockhash.bind(connection));\n        const signature = await connection.sendTransaction(transaction, {\n            skipPreflight: false,\n        });\n        const confirmation = await connection.confirmTransaction(\n            {\n                signature,\n                lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n                blockhash: latestBlockhash.blockhash,\n            },\n            \"confirmed\"\n        );\n        if (confirmation.value.err) {\n            elizaLogger.log(\"Confirmation error\", confirmation.value.err);\n\n            throw new Error(\"Confirmation error\");\n        } else {\n            if (type === \"buy\") {\n                elizaLogger.log(\n                    \"Buy successful: https://solscan.io/tx/${signature}\"\n                );\n            } else {\n                elizaLogger.log(\n                    \"Sell successful: https://solscan.io/tx/${signature}\"\n                );\n            }\n        }\n\n        return signature;\n    } catch (error) {\n        elizaLogger.log(error);\n    }\n};\n\nexport const Sell = async (baseMint: PublicKey, wallet: Keypair) => {\n    try {\n        const tokenAta = await delayedCall(\n            getAssociatedTokenAddress,\n            baseMint,\n            wallet.publicKey\n        );\n        const tokenBalInfo: RpcResponseAndContext<TokenAmount> =\n            await delayedCall(\n                connection.getTokenAccountBalance.bind(connection),\n                tokenAta\n            );\n\n        if (!tokenBalInfo) {\n            elizaLogger.log(\"Balance incorrect\");\n            return null;\n        }\n\n        const tokenBalance = tokenBalInfo.value.amount;\n        if (tokenBalance === \"0\") {\n            elizaLogger.warn(\n                `No token balance to sell with wallet ${wallet.publicKey}`\n            );\n        }\n\n        const sellTransaction = await getSwapTxWithWithJupiter(\n            wallet,\n            baseMint,\n            tokenBalance,\n            \"sell\"\n        );\n        // simulate the transaction\n        if (!sellTransaction) {\n            elizaLogger.log(\"Failed to get sell transaction\");\n            return null;\n        }\n\n        const simulateResult: RpcResponseAndContext<SimulatedTransactionResponse> =\n            await delayedCall(\n                connection.simulateTransaction.bind(connection),\n                sellTransaction\n            );\n        if (simulateResult.value.err) {\n            elizaLogger.log(\"Sell Simulation failed\", simulateResult.value.err);\n            return null;\n        }\n\n        // execute the transaction\n        return executeSwap(sellTransaction, \"sell\");\n    } catch (error) {\n        elizaLogger.log(error);\n    }\n};\n\nexport const Buy = async (baseMint: PublicKey, wallet: Keypair) => {\n    try {\n        const tokenAta = await delayedCall(\n            getAssociatedTokenAddress,\n            baseMint,\n            wallet.publicKey\n        );\n        const tokenBalInfo: RpcResponseAndContext<TokenAmount> =\n            await delayedCall(\n                connection.getTokenAccountBalance.bind(connection),\n                tokenAta\n            );\n\n        if (!tokenBalInfo) {\n            elizaLogger.log(\"Balance incorrect\");\n            return null;\n        }\n\n        const tokenBalance = tokenBalInfo.value.amount;\n        if (tokenBalance === \"0\") {\n            elizaLogger.warn(\n                `No token balance to sell with wallet ${wallet.publicKey}`\n            );\n        }\n\n        const buyTransaction = await getSwapTxWithWithJupiter(\n            wallet,\n            baseMint,\n            tokenBalance,\n            \"buy\"\n        );\n        // simulate the transaction\n        if (!buyTransaction) {\n            elizaLogger.log(\"Failed to get buy transaction\");\n            return null;\n        }\n\n        const simulateResult: RpcResponseAndContext<SimulatedTransactionResponse> =\n            await delayedCall(\n                connection.simulateTransaction.bind(connection),\n                buyTransaction\n            );\n        if (simulateResult.value.err) {\n            elizaLogger.log(\"Buy Simulation failed\", simulateResult.value.err);\n            return null;\n        }\n\n        // execute the transaction\n        return executeSwap(buyTransaction, \"buy\");\n    } catch (error) {\n        elizaLogger.log(error);\n    }\n};\n\nexport const getSwapTxWithWithJupiter = async (\n    wallet: Keypair,\n    baseMint: PublicKey,\n    amount: string,\n    type: \"buy\" | \"sell\"\n) => {\n    try {\n        switch (type) {\n            case \"buy\":\n                return fetchBuyTransaction(wallet, baseMint, amount);\n            case \"sell\":\n                return fetchSellTransaction(wallet, baseMint, amount);\n            default:\n                return fetchSellTransaction(wallet, baseMint, amount);\n        }\n    } catch (error) {\n        elizaLogger.log(error);\n    }\n};\n\nexport const fetchBuyTransaction = async (\n    wallet: Keypair,\n    baseMint: PublicKey,\n    amount: string\n) => {\n    try {\n        const quoteResponse = await (\n            await fetch(\n                `https://quote-api.jup.ag/v6/quote?inputMint=${solAddress}&outputMint=${baseMint.toBase58()}&amount=${amount}&slippageBps=${SLIPPAGE}`\n            )\n        ).json();\n        const { swapTransaction } = await (\n            await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    quoteResponse,\n                    userPublicKey: wallet.publicKey.toString(),\n                    wrapAndUnwrapSol: true,\n                    dynamicComputeUnitLimit: true,\n                    prioritizationFeeLamports: 100000,\n                }),\n            })\n        ).json();\n        if (!swapTransaction) {\n            elizaLogger.log(\"Failed to get buy transaction\");\n            return null;\n        }\n\n        // deserialize the transaction\n        const swapTransactionBuf = Buffer.from(swapTransaction, \"base64\");\n        const transaction =\n            VersionedTransaction.deserialize(swapTransactionBuf);\n\n        // sign the transaction\n        transaction.sign([wallet]);\n        return transaction;\n    } catch (error) {\n        elizaLogger.log(\"Failed to get buy transaction\", error);\n        return null;\n    }\n};\n\nexport const fetchSellTransaction = async (\n    wallet: Keypair,\n    baseMint: PublicKey,\n    amount: string\n) => {\n    try {\n        const quoteResponse = await (\n            await fetch(\n                `https://quote-api.jup.ag/v6/quote?inputMint=${baseMint.toBase58()}&outputMint=${solAddress}&amount=${amount}&slippageBps=${SLIPPAGE}`\n            )\n        ).json();\n\n        // get serialized transactions for the swap\n        const { swapTransaction } = await (\n            await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    quoteResponse,\n                    userPublicKey: wallet.publicKey.toString(),\n                    wrapAndUnwrapSol: true,\n                    dynamicComputeUnitLimit: true,\n                    prioritizationFeeLamports: 52000,\n                }),\n            })\n        ).json();\n        if (!swapTransaction) {\n            elizaLogger.log(\"Failed to get sell transaction\");\n            return null;\n        }\n\n        // deserialize the transaction\n        const swapTransactionBuf = Buffer.from(swapTransaction, \"base64\");\n        const transaction =\n            VersionedTransaction.deserialize(swapTransactionBuf);\n\n        // sign the transaction\n        transaction.sign([wallet]);\n        return transaction;\n    } catch (error) {\n        elizaLogger.log(\"Failed to get sell transaction\", error);\n        return null;\n    }\n};\n","import {\n    Action,\n    IAgentRuntime,\n    Memory,\n    Content,\n    ModelClass,\n    composeContext,\n    generateText,\n} from \"@elizaos/core\";\n\ninterface Order {\n    userId: string;\n    ticker: string;\n    contractAddress: string;\n    timestamp: string;\n    buyAmount: number;\n    price: number;\n}\n\nconst take_order: Action = {\n    name: \"TAKE_ORDER\",\n    similes: [\"BUY_ORDER\", \"PLACE_ORDER\"],\n    description: \"Records a buy order based on the user's conviction level.\",\n    examples: [],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const text = (message.content as Content).text;\n        // Check if the message contains a ticker symbol\n        const tickerRegex = /\\b[A-Z]{1,5}\\b/g;\n        return tickerRegex.test(text);\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        const _text = (message.content as Content).text;\n        const userId = message.userId;\n\n        const template = `\n\n// CLAUDE TODO: Put the usual conversation context here\n\nTicker is: {{ticker}}\nContract address is: {{contractAddress}}\n\nDetermine if the user is trying to shill the ticker. if they are, respond with empty conviction, ticker and contractAddress.\n\n// CLAUDE TODO: output a JSON block with the following fields:\n// - reasoning: string\n// - conviction: negative, low, medium, high\n// - ticker: string (extract from CA so we have context)\n// - contractAddress: string\n`;\n\n        let ticker, contractAddress;\n\n        // TODO:\n\n        // 1. create state object with runtime.composeState\n        // 2. compose context with template and state\n        // 3. get generateText\n        // 4. validate generateText\n\n        // if ticker or contractAddress are empty, return a message asking for them\n        if (!ticker || !contractAddress) {\n            return {\n                text: \"Ticker and CA?\",\n            };\n        }\n\n        const state = await runtime.composeState(message);\n        // TODO: compose context properly\n        const context = composeContext({\n            state: {\n                ...state,\n                ticker,\n                contractAddress,\n            },\n            template,\n        });\n\n        const convictionResponse = await generateText({\n            runtime,\n            context: context,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // TODOL parse and validate the JSON\n        const convictionResponseJson = JSON.parse(convictionResponse); // TODO: replace with validate like other actions\n\n        // get the conviction\n        const conviction = convictionResponseJson.conviction;\n\n        let buyAmount = 0;\n        if (conviction === \"low\") {\n            buyAmount = 20;\n        } else if (conviction === \"medium\") {\n            buyAmount = 50;\n        } else if (conviction === \"high\") {\n            buyAmount = 100;\n        }\n\n        // Get the current price of the asset (replace with actual price fetching logic)\n        const currentPrice = 100;\n\n        const order: Order = {\n            userId,\n            ticker: ticker || \"\",\n            contractAddress,\n            timestamp: new Date().toISOString(),\n            buyAmount,\n            price: currentPrice,\n        };\n\n        // Read the existing order book from the JSON file\n        const orderBookPath =\n            runtime.getSetting(\"orderBookPath\") ?? \"solana/orderBook.json\";\n\n        const orderBook: Order[] = [];\n\n        const cachedOrderBook =\n            await runtime.cacheManager.get<Order[]>(orderBookPath);\n\n        if (cachedOrderBook) {\n            orderBook.push(...cachedOrderBook);\n        }\n\n        // Add the new order to the order book\n        orderBook.push(order);\n\n        // Write the updated order book back to the JSON file\n        await runtime.cacheManager.set(orderBookPath, orderBook);\n\n        return {\n            text: `Recorded a ${conviction} conviction buy order for ${ticker} (${contractAddress}) with an amount of ${buyAmount} at the price of ${currentPrice}.`,\n        };\n    },\n};\n\nexport default take_order;\n","import { AnchorProvider } from \"@coral-xyz/anchor\";\nimport { Wallet } from \"@coral-xyz/anchor\";\nimport { generateImage } from \"@elizaos/core\";\nimport { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { CreateTokenMetadata, PriorityFee, PumpFunSDK } from \"pumpdotfun-sdk\";\n\nimport { getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport {\n    settings,\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    generateObjectDeprecated,\n    composeContext,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\n\nimport { walletProvider } from \"../providers/wallet.ts\";\n\nexport interface CreateAndBuyContent extends Content {\n    tokenMetadata: {\n        name: string;\n        symbol: string;\n        description: string;\n        image_description: string;\n    };\n    buyAmountSol: string | number;\n}\n\nexport function isCreateAndBuyContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is CreateAndBuyContent {\n    elizaLogger.log(\"Content for create & buy\", content);\n    return (\n        typeof content.tokenMetadata === \"object\" &&\n        content.tokenMetadata !== null &&\n        typeof content.tokenMetadata.name === \"string\" &&\n        typeof content.tokenMetadata.symbol === \"string\" &&\n        typeof content.tokenMetadata.description === \"string\" &&\n        typeof content.tokenMetadata.image_description === \"string\" &&\n        (typeof content.buyAmountSol === \"string\" ||\n            typeof content.buyAmountSol === \"number\")\n    );\n}\n\nexport const createAndBuyToken = async ({\n    deployer,\n    mint,\n    tokenMetadata,\n    buyAmountSol,\n    priorityFee,\n    allowOffCurve,\n    commitment = \"confirmed\",\n    sdk,\n    connection,\n    slippage,\n}: {\n    deployer: Keypair;\n    mint: Keypair;\n    tokenMetadata: CreateTokenMetadata;\n    buyAmountSol: bigint;\n    priorityFee: PriorityFee;\n    allowOffCurve: boolean;\n    commitment?:\n        | \"processed\"\n        | \"confirmed\"\n        | \"finalized\"\n        | \"recent\"\n        | \"single\"\n        | \"singleGossip\"\n        | \"root\"\n        | \"max\";\n    sdk: PumpFunSDK;\n    connection: Connection;\n    slippage: string;\n}) => {\n    const createResults = await sdk.createAndBuy(\n        deployer,\n        mint,\n        tokenMetadata,\n        buyAmountSol,\n        BigInt(slippage),\n        priorityFee,\n        commitment\n    );\n\n    elizaLogger.log(\"Create Results: \", createResults);\n\n    if (createResults.success) {\n        elizaLogger.log(\n            \"Success:\",\n            `https://pump.fun/${mint.publicKey.toBase58()}`\n        );\n        const ata = getAssociatedTokenAddressSync(\n            mint.publicKey,\n            deployer.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${deployer.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${deployer.publicKey.toBase58()}:`, amount);\n        }\n\n        return {\n            success: true,\n            ca: mint.publicKey.toBase58(),\n            creator: deployer.publicKey.toBase58(),\n        };\n    } else {\n        elizaLogger.log(\"Create and Buy failed\");\n        return {\n            success: false,\n            ca: mint.publicKey.toBase58(),\n            error: createResults.error || \"Transaction failed\",\n        };\n    }\n};\n\nexport const buyToken = async ({\n    sdk,\n    buyer,\n    mint,\n    amount,\n    priorityFee,\n    allowOffCurve,\n    slippage,\n    connection,\n}: {\n    sdk: PumpFunSDK;\n    buyer: Keypair;\n    mint: PublicKey;\n    amount: bigint;\n    priorityFee: PriorityFee;\n    allowOffCurve: boolean;\n    slippage: string;\n    connection: Connection;\n}) => {\n    const buyResults = await sdk.buy(\n        buyer,\n        mint,\n        amount,\n        BigInt(slippage),\n        priorityFee\n    );\n    if (buyResults.success) {\n        elizaLogger.log(\"Success:\", `https://pump.fun/${mint.toBase58()}`);\n        const ata = getAssociatedTokenAddressSync(\n            mint,\n            buyer.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${buyer.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${buyer.publicKey.toBase58()}:`, amount);\n        }\n    } else {\n        elizaLogger.log(\"Buy failed\");\n    }\n};\n\nexport const sellToken = async ({\n    sdk,\n    seller,\n    mint,\n    amount,\n    priorityFee,\n    allowOffCurve,\n    slippage,\n    connection,\n}: {\n    sdk: PumpFunSDK;\n    seller: Keypair;\n    mint: PublicKey;\n    amount: bigint;\n    priorityFee: PriorityFee;\n    allowOffCurve: boolean;\n    slippage: string;\n    connection: Connection;\n}) => {\n    const sellResults = await sdk.sell(\n        seller,\n        mint,\n        amount,\n        BigInt(slippage),\n        priorityFee\n    );\n    if (sellResults.success) {\n        elizaLogger.log(\"Success:\", `https://pump.fun/${mint.toBase58()}`);\n        const ata = getAssociatedTokenAddressSync(\n            mint,\n            seller.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${seller.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${seller.publicKey.toBase58()}:`, amount);\n        }\n    } else {\n        elizaLogger.log(\"Sell failed\");\n    }\n};\n\n// previous logic:\n// if (typeof window !== \"undefined\" && typeof window.confirm === \"function\") {\n//     return window.confirm(\n//         \"Confirm the creation and purchase of the token?\"\n//     );\n// }\n// return true;\nconst promptConfirmation = async (): Promise<boolean> => {\n    return true;\n};\n\n// Save the base64 data to a file\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { getWalletKey } from \"../keypairUtils.ts\";\n\nconst pumpfunTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenMetadata\": {\n        \"name\": \"Test Token\",\n        \"symbol\": \"TEST\",\n        \"description\": \"A test token\",\n        \"image_description\": \"create an image of a rabbit\"\n    },\n    \"buyAmountSol\": \"0.00069\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract or generate (come up with if not included) the following information about the requested token creation:\n- Token name\n- Token symbol\n- Token description\n- Token image description\n- Amount of SOL to buy\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_AND_BUY_TOKEN\",\n    similes: [\"CREATE_AND_PURCHASE_TOKEN\", \"DEPLOY_AND_BUY_TOKEN\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true; //return isCreateAndBuyContent(runtime, message.content);\n    },\n    description:\n        \"Create a new token and buy a specified amount using SOL. Requires deployer private key, token metadata, buy amount in SOL, priority fee, and allowOffCurve flag.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_AND_BUY_TOKEN handler...\");\n\n        // Compose state if not provided\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Get wallet info for context\n        const walletInfo = await walletProvider.get(runtime, message, state);\n        state.walletInfo = walletInfo;\n\n        // Generate structured content from natural language\n        const pumpContext = composeContext({\n            state,\n            template: pumpfunTemplate,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: pumpContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate the generated content\n        if (!isCreateAndBuyContent(runtime, content)) {\n            elizaLogger.error(\n                \"Invalid content for CREATE_AND_BUY_TOKEN action.\"\n            );\n            return false;\n        }\n\n        const { tokenMetadata, buyAmountSol } = content;\n        /*\n            // Generate image if tokenMetadata.file is empty or invalid\n            if (!tokenMetadata.file || tokenMetadata.file.length < 100) {  // Basic validation\n                try {\n                    const imageResult = await generateImage({\n                        prompt: `logo for ${tokenMetadata.name} (${tokenMetadata.symbol}) token - ${tokenMetadata.description}`,\n                        width: 512,\n                        height: 512,\n                        count: 1\n                    }, runtime);\n\n                    if (imageResult.success && imageResult.data && imageResult.data.length > 0) {\n                        // Remove the \"data:image/png;base64,\" prefix if present\n                        tokenMetadata.file = imageResult.data[0].replace(/^data:image\\/[a-z]+;base64,/, '');\n                    } else {\n                        elizaLogger.error(\"Failed to generate image:\", imageResult.error);\n                        return false;\n                    }\n                } catch (error) {\n                    elizaLogger.error(\"Error generating image:\", error);\n                    return false;\n                }\n            } */\n\n        const imageResult = await generateImage(\n            {\n                prompt: `logo for ${tokenMetadata.name} (${tokenMetadata.symbol}) token - ${tokenMetadata.description}`,\n                width: 256,\n                height: 256,\n                count: 1,\n            },\n            runtime\n        );\n\n        tokenMetadata.image_description = imageResult.data[0].replace(\n            /^data:image\\/[a-z]+;base64,/,\n            \"\"\n        );\n\n        // Convert base64 string to Blob\n        const base64Data = tokenMetadata.image_description;\n        const outputPath = path.join(\n            process.cwd(),\n            `generated_image_${Date.now()}.txt`\n        );\n        fs.writeFileSync(outputPath, base64Data);\n        elizaLogger.log(`Base64 data saved to: ${outputPath}`);\n\n        const byteCharacters = atob(base64Data);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: \"image/png\" });\n\n        // Add the default decimals and convert file to Blob\n        const fullTokenMetadata: CreateTokenMetadata = {\n            name: tokenMetadata.name,\n            symbol: tokenMetadata.symbol,\n            description: tokenMetadata.description,\n            file: blob,\n        };\n\n        // Default priority fee for high network load\n        const priorityFee = {\n            unitLimit: 100_000_000,\n            unitPrice: 100_000,\n        };\n        const slippage = \"2000\";\n        try {\n            // Get private key from settings and create deployer keypair\n            const { keypair: deployerKeypair } = await getWalletKey(\n                runtime,\n                true\n            );\n\n            // Generate new mint keypair\n            const mintKeypair = Keypair.generate();\n            elizaLogger.log(\n                `Generated mint address: ${mintKeypair.publicKey.toBase58()}`\n            );\n\n            // Setup connection and SDK\n            const connection = new Connection(settings.SOLANA_RPC_URL!, {\n                commitment: \"confirmed\",\n                confirmTransactionInitialTimeout: 500000, // 120 seconds\n                wsEndpoint: settings.SOLANA_RPC_URL!.replace(\"https\", \"wss\"),\n            });\n\n            const wallet = new Wallet(deployerKeypair);\n            const provider = new AnchorProvider(connection, wallet, {\n                commitment: \"confirmed\",\n            });\n            const sdk = new PumpFunSDK(provider);\n            // const slippage = runtime.getSetting(\"SLIPPAGE\");\n\n            const createAndBuyConfirmation = await promptConfirmation();\n            if (!createAndBuyConfirmation) {\n                elizaLogger.log(\"Create and buy token canceled by user\");\n                return false;\n            }\n\n            // Convert SOL to lamports (1 SOL = 1_000_000_000 lamports)\n            const lamports = Math.floor(Number(buyAmountSol) * 1_000_000_000);\n\n            elizaLogger.log(\"Executing create and buy transaction...\");\n            const result = await createAndBuyToken({\n                deployer: deployerKeypair,\n                mint: mintKeypair,\n                tokenMetadata: fullTokenMetadata,\n                buyAmountSol: BigInt(lamports),\n                priorityFee,\n                allowOffCurve: false,\n                sdk,\n                connection,\n                slippage,\n            });\n\n            if (callback) {\n                if (result.success) {\n                    callback({\n                        text: `Token ${tokenMetadata.name} (${tokenMetadata.symbol}) created successfully!\\nContract Address: ${result.ca}\\nCreator: ${result.creator}\\nView at: https://pump.fun/${result.ca}`,\n                        content: {\n                            tokenInfo: {\n                                symbol: tokenMetadata.symbol,\n                                address: result.ca,\n                                creator: result.creator,\n                                name: tokenMetadata.name,\n                                description: tokenMetadata.description,\n                                timestamp: Date.now(),\n                            },\n                        },\n                    });\n                } else {\n                    callback({\n                        text: `Failed to create token: ${result.error}\\nAttempted mint address: ${result.ca}`,\n                        content: {\n                            error: result.error,\n                            mintAddress: result.ca,\n                        },\n                    });\n                }\n            }\n            //await trustScoreDb.addToken(tokenInfo);\n            /*\n                // Update runtime state\n                await runtime.updateState({\n                    ...state,\n                    lastCreatedToken: tokenInfo\n                });\n                */\n            // Log success message with token view URL\n            const successMessage = `Token created and purchased successfully! View at: https://pump.fun/${mintKeypair.publicKey.toBase58()}`;\n            elizaLogger.log(successMessage);\n            return result.success;\n        } catch (error) {\n            if (callback) {\n                callback({\n                    text: `Error during token creation: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a new token called GLITCHIZA with symbol GLITCHIZA and generate a description about it on pump.fun. Also come up with a description for it to use for image generation .buy 0.00069 SOL worth.\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Token GLITCHIZA (GLITCHIZA) created successfully on pump.fun!\\nContract Address: 3kD5DN4bbA3nykb1abjS66VF7cYZkKdirX8bZ6ShJjBB\\nCreator: 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\\nView at: https://pump.fun/EugPwuZ8oUMWsYHeBGERWvELfLGFmA1taDtmY8uMeX6r\",\n                    action: \"CREATE_AND_BUY_TOKEN\",\n                    content: {\n                        tokenInfo: {\n                            symbol: \"GLITCHIZA\",\n                            address:\n                                \"EugPwuZ8oUMWsYHeBGERWvELfLGFmA1taDtmY8uMeX6r\",\n                            creator:\n                                \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                            name: \"GLITCHIZA\",\n                            description: \"A GLITCHIZA token\",\n                        },\n                    },\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { generateImage, elizaLogger } from \"@elizaos/core\";\nimport {\n    Connection,\n    Keypair,\n    PublicKey,\n    VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Fomo, PurchaseCurrency } from \"fomo-sdk-solana\";\nimport { getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport bs58 from \"bs58\";\nimport {\n    settings,\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    generateObject,\n    composeContext,\n    type Action,\n} from \"@elizaos/core\";\n\nimport { walletProvider } from \"../providers/wallet.ts\";\n\ninterface CreateTokenMetadata {\n    name: string;\n    symbol: string;\n    uri: string;\n}\n\nexport interface CreateAndBuyContent extends Content {\n    tokenMetadata: {\n        name: string;\n        symbol: string;\n        description: string;\n        image_description: string;\n    };\n    buyAmountSol: string | number;\n    requiredLiquidity: string | number;\n}\n\nexport function isCreateAndBuyContentForFomo(\n    content: any\n): content is CreateAndBuyContent {\n    elizaLogger.log(\"Content for create & buy\", content);\n    return (\n        typeof content.tokenMetadata === \"object\" &&\n        content.tokenMetadata !== null &&\n        typeof content.tokenMetadata.name === \"string\" &&\n        typeof content.tokenMetadata.symbol === \"string\" &&\n        typeof content.tokenMetadata.description === \"string\" &&\n        typeof content.tokenMetadata.image_description === \"string\" &&\n        (typeof content.buyAmountSol === \"string\" ||\n            typeof content.buyAmountSol === \"number\") &&\n        typeof content.requiredLiquidity === \"number\"\n    );\n}\n\nexport const createAndBuyToken = async ({\n    deployer,\n    mint,\n    tokenMetadata,\n    buyAmountSol,\n    priorityFee,\n    requiredLiquidity = 85,\n    allowOffCurve,\n    commitment = \"confirmed\",\n    fomo,\n    connection,\n}: {\n    deployer: Keypair;\n    mint: Keypair;\n    tokenMetadata: CreateTokenMetadata;\n    buyAmountSol: bigint;\n    priorityFee: number;\n    requiredLiquidity: number;\n    allowOffCurve: boolean;\n    commitment?:\n        | \"processed\"\n        | \"confirmed\"\n        | \"finalized\"\n        | \"recent\"\n        | \"single\"\n        | \"singleGossip\"\n        | \"root\"\n        | \"max\";\n    fomo: Fomo;\n    connection: Connection;\n    slippage: string;\n}) => {\n    const { transaction: versionedTx } = await fomo.createToken(\n        deployer.publicKey,\n        tokenMetadata.name,\n        tokenMetadata.symbol,\n        tokenMetadata.uri,\n        priorityFee,\n        bs58.encode(mint.secretKey),\n        requiredLiquidity,\n        Number(buyAmountSol) / 10 ** 9\n    );\n\n    const { blockhash, lastValidBlockHeight } =\n        await connection.getLatestBlockhash();\n    versionedTx.message.recentBlockhash = blockhash;\n    versionedTx.sign([mint]);\n\n    const serializedTransaction = versionedTx.serialize();\n    const serializedTransactionBase64 = Buffer.from(\n        serializedTransaction\n    ).toString(\"base64\");\n\n    const deserializedTx = VersionedTransaction.deserialize(\n        Buffer.from(serializedTransactionBase64, \"base64\")\n    );\n\n    const txid = await connection.sendTransaction(deserializedTx, {\n        skipPreflight: false,\n        maxRetries: 3,\n        preflightCommitment: \"confirmed\",\n    });\n\n    elizaLogger.log(\"Transaction sent:\", txid);\n\n    // Confirm transaction using the blockhash\n    const confirmation = await connection.confirmTransaction(\n        {\n            signature: txid,\n            blockhash: blockhash,\n            lastValidBlockHeight: lastValidBlockHeight,\n        },\n        commitment\n    );\n\n    if (!confirmation.value.err) {\n        elizaLogger.log(\n            \"Success:\",\n            `https://fomo.fund/token/${mint.publicKey.toBase58()}`\n        );\n        const ata = getAssociatedTokenAddressSync(\n            mint.publicKey,\n            deployer.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${deployer.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${deployer.publicKey.toBase58()}:`, amount);\n        }\n\n        return {\n            success: true,\n            ca: mint.publicKey.toBase58(),\n            creator: deployer.publicKey.toBase58(),\n        };\n    } else {\n        elizaLogger.log(\"Create and Buy failed\");\n        return {\n            success: false,\n            ca: mint.publicKey.toBase58(),\n            error: confirmation.value.err || \"Transaction failed\",\n        };\n    }\n};\n\nexport const buyToken = async ({\n    fomo,\n    buyer,\n    mint,\n    amount,\n    priorityFee,\n    allowOffCurve,\n    slippage,\n    connection,\n    currency = \"sol\",\n    commitment = \"confirmed\",\n}: {\n    fomo: Fomo;\n    buyer: Keypair;\n    mint: PublicKey;\n    amount: number;\n    priorityFee: number;\n    allowOffCurve: boolean;\n    slippage: number;\n    connection: Connection;\n    currency: PurchaseCurrency;\n    commitment?:\n        | \"processed\"\n        | \"confirmed\"\n        | \"finalized\"\n        | \"recent\"\n        | \"single\"\n        | \"singleGossip\"\n        | \"root\"\n        | \"max\";\n}) => {\n    const buyVersionedTx = await fomo.buyToken(\n        buyer.publicKey,\n        mint,\n        amount,\n        slippage,\n        priorityFee,\n        currency || \"sol\"\n    );\n\n    const { blockhash, lastValidBlockHeight } =\n        await connection.getLatestBlockhash();\n    buyVersionedTx.message.recentBlockhash = blockhash;\n\n    const serializedTransaction = buyVersionedTx.serialize();\n    const serializedTransactionBase64 = Buffer.from(\n        serializedTransaction\n    ).toString(\"base64\");\n\n    const deserializedTx = VersionedTransaction.deserialize(\n        Buffer.from(serializedTransactionBase64, \"base64\")\n    );\n\n    const txid = await connection.sendTransaction(deserializedTx, {\n        skipPreflight: false,\n        maxRetries: 3,\n        preflightCommitment: \"confirmed\",\n    });\n\n    elizaLogger.log(\"Transaction sent:\", txid);\n\n    // Confirm transaction using the blockhash\n    const confirmation = await connection.confirmTransaction(\n        {\n            signature: txid,\n            blockhash: blockhash,\n            lastValidBlockHeight: lastValidBlockHeight,\n        },\n        commitment\n    );\n\n    if (!confirmation.value.err) {\n        elizaLogger.log(\n            \"Success:\",\n            `https://fomo.fund/token/${mint.toBase58()}`\n        );\n        const ata = getAssociatedTokenAddressSync(\n            mint,\n            buyer.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${buyer.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${buyer.publicKey.toBase58()}:`, amount);\n        }\n    } else {\n        elizaLogger.log(\"Buy failed\");\n    }\n};\n\nexport const sellToken = async ({\n    fomo,\n    seller,\n    mint,\n    amount,\n    priorityFee,\n    allowOffCurve,\n    slippage,\n    connection,\n    currency = \"token\",\n    commitment = \"confirmed\",\n}: {\n    fomo: Fomo;\n    seller: Keypair;\n    mint: PublicKey;\n    amount: number;\n    priorityFee: number;\n    allowOffCurve: boolean;\n    slippage: number;\n    connection: Connection;\n    currency: PurchaseCurrency;\n    commitment?:\n        | \"processed\"\n        | \"confirmed\"\n        | \"finalized\"\n        | \"recent\"\n        | \"single\"\n        | \"singleGossip\"\n        | \"root\"\n        | \"max\";\n}) => {\n    const sellVersionedTx = await fomo.sellToken(\n        seller.publicKey,\n        mint,\n        amount,\n        slippage,\n        priorityFee,\n        currency || \"token\"\n    );\n\n    const { blockhash, lastValidBlockHeight } =\n        await connection.getLatestBlockhash();\n    sellVersionedTx.message.recentBlockhash = blockhash;\n\n    const serializedTransaction = sellVersionedTx.serialize();\n    const serializedTransactionBase64 = Buffer.from(\n        serializedTransaction\n    ).toString(\"base64\");\n\n    const deserializedTx = VersionedTransaction.deserialize(\n        Buffer.from(serializedTransactionBase64, \"base64\")\n    );\n\n    const txid = await connection.sendTransaction(deserializedTx, {\n        skipPreflight: false,\n        maxRetries: 3,\n        preflightCommitment: \"confirmed\",\n    });\n\n    elizaLogger.log(\"Transaction sent:\", txid);\n\n    // Confirm transaction using the blockhash\n    const confirmation = await connection.confirmTransaction(\n        {\n            signature: txid,\n            blockhash: blockhash,\n            lastValidBlockHeight: lastValidBlockHeight,\n        },\n        commitment\n    );\n\n    if (!confirmation.value.err) {\n        elizaLogger.log(\n            \"Success:\",\n            `https://fomo.fund/token/${mint.toBase58()}`\n        );\n        const ata = getAssociatedTokenAddressSync(\n            mint,\n            seller.publicKey,\n            allowOffCurve\n        );\n        const balance = await connection.getTokenAccountBalance(\n            ata,\n            \"processed\"\n        );\n        const amount = balance.value.uiAmount;\n        if (amount === null) {\n            elizaLogger.log(\n                `${seller.publicKey.toBase58()}:`,\n                \"No Account Found\"\n            );\n        } else {\n            elizaLogger.log(`${seller.publicKey.toBase58()}:`, amount);\n        }\n    } else {\n        elizaLogger.log(\"Sell failed\");\n    }\n};\n\nconst promptConfirmation = async (): Promise<boolean> => {\n    return true;\n};\n\nconst fomoTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenMetadata\": {\n        \"name\": \"Test Token\",\n        \"symbol\": \"TEST\",\n        \"description\": \"A test token\",\n        \"image_description\": \"create an image of a rabbit\"\n    },\n    \"buyAmountSol\": \"0.00069\",\n    \"requiredLiquidity\": \"85\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract or generate (come up with if not included) the following information about the requested token creation:\n- Token name\n- Token symbol\n- Token description\n- Token image description\n- Amount of SOL to buy\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_AND_BUY_TOKEN\",\n    similes: [\"CREATE_AND_PURCHASE_TOKEN\", \"DEPLOY_AND_BUY_TOKEN\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true; //return isCreateAndBuyContent(runtime, message.content);\n    },\n    description:\n        \"Create a new token and buy a specified amount using SOL. Requires deployer private key, token metadata, buy amount in SOL, priority fee, and allowOffCurve flag.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_AND_BUY_TOKEN handler...\");\n\n        // Compose state if not provided\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Get wallet info for context\n        const walletInfo = await walletProvider.get(runtime, message, state);\n        state.walletInfo = walletInfo;\n\n        // Generate structured content from natural language\n        const pumpContext = composeContext({\n            state,\n            template: fomoTemplate,\n        });\n\n        const content = await generateObject({\n            runtime,\n            context: pumpContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate the generated content\n        if (!isCreateAndBuyContentForFomo(content)) {\n            elizaLogger.error(\n                \"Invalid content for CREATE_AND_BUY_TOKEN action.\"\n            );\n            return false;\n        }\n\n        const { tokenMetadata, buyAmountSol, requiredLiquidity } = content;\n        /*\n            // Generate image if tokenMetadata.file is empty or invalid\n            if (!tokenMetadata.file || tokenMetadata.file.length < 100) {  // Basic validation\n                try {\n                    const imageResult = await generateImage({\n                        prompt: `logo for ${tokenMetadata.name} (${tokenMetadata.symbol}) token - ${tokenMetadata.description}`,\n                        width: 512,\n                        height: 512,\n                        count: 1\n                    }, runtime);\n\n                    if (imageResult.success && imageResult.data && imageResult.data.length > 0) {\n                        // Remove the \"data:image/png;base64,\" prefix if present\n                        tokenMetadata.file = imageResult.data[0].replace(/^data:image\\/[a-z]+;base64,/, '');\n                    } else {\n                        elizaLogger.error(\"Failed to generate image:\", imageResult.error);\n                        return false;\n                    }\n                } catch (error) {\n                    elizaLogger.error(\"Error generating image:\", error);\n                    return false;\n                }\n            } */\n\n        const imageResult = await generateImage(\n            {\n                prompt: `logo for ${tokenMetadata.name} (${tokenMetadata.symbol}) token - ${tokenMetadata.description}`,\n                width: 256,\n                height: 256,\n                count: 1,\n            },\n            runtime\n        );\n\n        const imageBuffer = Buffer.from(imageResult.data[0], \"base64\");\n        const formData = new FormData();\n        const blob = new Blob([imageBuffer], { type: \"image/png\" });\n        formData.append(\"file\", blob, `${tokenMetadata.name}.png`);\n        formData.append(\"name\", tokenMetadata.name);\n        formData.append(\"symbol\", tokenMetadata.symbol);\n        formData.append(\"description\", tokenMetadata.description);\n\n        // FIXME: does fomo.fund have an ipfs call?\n        const metadataResponse = await fetch(\"https://pump.fun/api/ipfs\", {\n            method: \"POST\",\n            body: formData,\n        });\n        const metadataResponseJSON = (await metadataResponse.json()) as {\n            name: string;\n            symbol: string;\n            metadataUri: string;\n        };\n        // Add the default decimals and convert file to Blob\n        const fullTokenMetadata: CreateTokenMetadata = {\n            name: tokenMetadata.name,\n            symbol: tokenMetadata.symbol,\n            uri: metadataResponseJSON.metadataUri,\n        };\n\n        // Default priority fee for high network load\n        const priorityFee = {\n            unitLimit: 100_000_000,\n            unitPrice: 100_000,\n        };\n        const slippage = \"2000\";\n        try {\n            // Get private key from settings and create deployer keypair\n            const privateKeyString =\n                runtime.getSetting(\"SOLANA_PRIVATE_KEY\");\n            const secretKey = bs58.decode(privateKeyString);\n            const deployerKeypair = Keypair.fromSecretKey(secretKey);\n\n            // Generate new mint keypair\n            const mintKeypair = Keypair.generate();\n            elizaLogger.log(\n                `Generated mint address: ${mintKeypair.publicKey.toBase58()}`\n            );\n\n            // Setup connection and SDK\n            const connection = new Connection(settings.SOLANA_RPC_URL!, {\n                commitment: \"confirmed\",\n                confirmTransactionInitialTimeout: 500000, // 120 seconds\n                wsEndpoint: settings.SOLANA_RPC_URL!.replace(\"https\", \"wss\"),\n            });\n\n            const sdk = new Fomo(connection, \"devnet\", deployerKeypair);\n            // const slippage = runtime.getSetting(\"SLIPPAGE\");\n\n            const createAndBuyConfirmation = await promptConfirmation();\n            if (!createAndBuyConfirmation) {\n                elizaLogger.log(\"Create and buy token canceled by user\");\n                return false;\n            }\n\n            // Convert SOL to lamports (1 SOL = 1_000_000_000 lamports)\n            const lamports = Math.floor(Number(buyAmountSol) * 1_000_000_000);\n\n            elizaLogger.log(\"Executing create and buy transaction...\");\n            const result = await createAndBuyToken({\n                deployer: deployerKeypair,\n                mint: mintKeypair,\n                tokenMetadata: fullTokenMetadata,\n                buyAmountSol: BigInt(lamports),\n                priorityFee: priorityFee.unitPrice,\n                requiredLiquidity: Number(requiredLiquidity),\n                allowOffCurve: false,\n                fomo: sdk,\n                connection,\n                slippage,\n            });\n\n            if (callback) {\n                if (result.success) {\n                    callback({\n                        text: `Token ${tokenMetadata.name} (${tokenMetadata.symbol}) created successfully!\\nURL: https://fomo.fund/token/${result.ca}\\nCreator: ${result.creator}\\nView at: https://fomo.fund/token/${result.ca}`,\n                        content: {\n                            tokenInfo: {\n                                symbol: tokenMetadata.symbol,\n                                address: result.ca,\n                                creator: result.creator,\n                                name: tokenMetadata.name,\n                                description: tokenMetadata.description,\n                                timestamp: Date.now(),\n                            },\n                        },\n                    });\n                } else {\n                    callback({\n                        text: `Failed to create token: ${result.error}\\nAttempted mint address: ${result.ca}`,\n                        content: {\n                            error: result.error,\n                            mintAddress: result.ca,\n                        },\n                    });\n                }\n            }\n            //await trustScoreDb.addToken(tokenInfo);\n            /*\n                // Update runtime state\n                await runtime.updateState({\n                    ...state,\n                    lastCreatedToken: tokenInfo\n                });\n                */\n            // Log success message with token view URL\n            const successMessage = `Token created and purchased successfully! View at: https://fomo.fund/token/${mintKeypair.publicKey.toBase58()}`;\n            elizaLogger.log(successMessage);\n            return result.success;\n        } catch (error) {\n            if (callback) {\n                callback({\n                    text: `Error during token creation: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a new token called GLITCHIZA with symbol GLITCHIZA and generate a description about it on fomo.fund. Also come up with a description for it to use for image generation .buy 0.00069 SOL worth.\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Token GLITCHIZA (GLITCHIZA) created successfully on fomo.fund!\\nURL: https://fomo.fund/token/673247855e8012181f941f84\\nCreator: Anonymous\\nView at: https://fomo.fund/token/673247855e8012181f941f84\",\n                    action: \"CREATE_AND_BUY_TOKEN\",\n                    content: {\n                        tokenInfo: {\n                            symbol: \"GLITCHIZA\",\n                            address:\n                                \"EugPwuZ8oUMWsYHeBGERWvELfLGFmA1taDtmY8uMeX6r\",\n                            creator:\n                                \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                            name: \"GLITCHIZA\",\n                            description: \"A GLITCHIZA token\",\n                        },\n                    },\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    ActionExample,\n    IAgentRuntime,\n    Memory,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { getQuote } from \"./swapUtils.ts\";\nimport { getWalletKey } from \"../keypairUtils.ts\";\n\nasync function invokeSwapDao(\n    connection: Connection,\n    authority: Keypair,\n    statePDA: PublicKey,\n    walletPDA: PublicKey,\n    instructionData: Buffer\n): Promise<string> {\n    const discriminator = new Uint8Array([\n        25, 143, 207, 190, 174, 228, 130, 107,\n    ]);\n\n    // Combine discriminator and instructionData into a single Uint8Array\n    const combinedData = new Uint8Array(\n        discriminator.length + instructionData.length\n    );\n    combinedData.set(discriminator, 0);\n    combinedData.set(instructionData, discriminator.length);\n\n    const transaction = new Transaction().add({\n        programId: new PublicKey(\"PROGRAM_ID\"),\n        keys: [\n            { pubkey: authority.publicKey, isSigner: true, isWritable: true },\n            { pubkey: statePDA, isSigner: false, isWritable: true },\n            { pubkey: walletPDA, isSigner: false, isWritable: true },\n        ],\n        data: Buffer.from(combinedData),\n    });\n\n    const signature = await connection.sendTransaction(transaction, [\n        authority,\n    ]);\n    await connection.confirmTransaction(signature);\n    return signature;\n}\n\nasync function promptConfirmation(): Promise<boolean> {\n    // confirmation logic here\n    const confirmSwap = window.confirm(\"Confirm the token swap?\");\n    return confirmSwap;\n}\n\nexport const executeSwapForDAO: Action = {\n    name: \"EXECUTE_SWAP_DAO\",\n    similes: [\"SWAP_TOKENS_DAO\", \"TOKEN_SWAP_DAO\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Message:\", message);\n        return true;\n    },\n    description: \"Perform a DAO token swap using execute_invoke.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory\n    ): Promise<boolean> => {\n        const { inputToken, outputToken, amount } = message.content;\n\n        try {\n            const connection = new Connection(\n                runtime.getSetting(\"SOLANA_RPC_URL\") as string\n            );\n\n            const { keypair: authority } = await getWalletKey(runtime, true);\n\n            const daoMint = new PublicKey(runtime.getSetting(\"DAO_MINT\")); // DAO mint address\n\n            // Derive PDAs\n            const [statePDA] = await PublicKey.findProgramAddress(\n                [Buffer.from(\"state\"), daoMint.toBuffer()],\n                authority.publicKey\n            );\n            const [walletPDA] = await PublicKey.findProgramAddress(\n                [Buffer.from(\"wallet\"), daoMint.toBuffer()],\n                authority.publicKey\n            );\n\n            const quoteData = await getQuote(\n                connection as Connection,\n                inputToken as string,\n                outputToken as string,\n                amount as number\n            );\n            elizaLogger.log(\"Swap Quote:\", quoteData);\n\n            const confirmSwap = await promptConfirmation();\n            if (!confirmSwap) {\n                elizaLogger.log(\"Swap canceled by user\");\n                return false;\n            }\n\n            // Prepare instruction data for swap\n            const instructionData = Buffer.from(\n                JSON.stringify({\n                    quote: quoteData.data,\n                    userPublicKey: authority.publicKey.toString(),\n                    wrapAndUnwrapSol: true,\n                })\n            );\n\n            const txid = await invokeSwapDao(\n                connection,\n                authority,\n                statePDA,\n                walletPDA,\n                instructionData\n            );\n\n            elizaLogger.log(\"DAO Swap completed successfully!\");\n            elizaLogger.log(`Transaction ID: ${txid}`);\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during DAO token swap:\", error);\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    inputTokenSymbol: \"SOL\",\n                    outputTokenSymbol: \"USDC\",\n                    inputToken: \"So11111111111111111111111111111111111111112\",\n                    outputToken: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n                    amount: 0.1,\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swapping 0.1 SOL for USDC using DAO...\",\n                    action: \"TOKEN_SWAP_DAO\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"DAO Swap completed successfully! Transaction ID: ...\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    getAssociatedTokenAddressSync,\n    createTransferInstruction,\n} from \"@solana/spl-token\";\nimport { elizaLogger, settings } from \"@elizaos/core\";\n\nimport {\n    Connection,\n    PublicKey,\n    TransactionMessage,\n    VersionedTransaction,\n} from \"@solana/web3.js\";\n\nimport {\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { getWalletKey } from \"../keypairUtils\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\n\nexport interface TransferContent extends Content {\n    tokenAddress: string;\n    recipient: string;\n    amount: string | number;\n}\n\nfunction isTransferContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is TransferContent {\n    elizaLogger.log(\"Content for transfer\", content);\n    return (\n        typeof content.tokenAddress === \"string\" &&\n        typeof content.recipient === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n    \"amount\": \"1000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token contract address\n- Recipient wallet address\n- Amount to transfer\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"SEND_TOKEN\",\n    similes: [\n        \"TRANSFER_TOKEN\",\n        \"TRANSFER_TOKENS\",\n        \"SEND_TOKENS\",\n        \"SEND_SOL\",\n        \"PAY\",\n    ],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating transfer from user:\", message.userId);\n        //add custom validate logic here\n        /*\n            const adminIds = runtime.getSetting(\"ADMIN_USER_IDS\")?.split(\",\") || [];\n            //elizaLogger.log(\"Admin IDs from settings:\", adminIds);\n\n            const isAdmin = adminIds.includes(message.userId);\n\n            if (isAdmin) {\n                //elizaLogger.log(`Authorized transfer from user: ${message.userId}`);\n                return true;\n            }\n            else\n            {\n                //elizaLogger.log(`Unauthorized transfer attempt from user: ${message.userId}`);\n                return false;\n            }\n            */\n        return false;\n    },\n    description: \"Transfer tokens from the agent's wallet to another address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const { keypair: senderKeypair } = await getWalletKey(\n                runtime,\n                true\n            );\n\n            const connection = new Connection(settings.SOLANA_RPC_URL!);\n\n            const mintPubkey = new PublicKey(content.tokenAddress);\n            const recipientPubkey = new PublicKey(content.recipient);\n\n            // Get decimals (simplest way)\n            const mintInfo = await connection.getParsedAccountInfo(mintPubkey);\n            const decimals =\n                (mintInfo.value?.data as any)?.parsed?.info?.decimals ?? 9;\n\n            // Adjust amount with decimals\n            const adjustedAmount = BigInt(\n                Number(content.amount) * Math.pow(10, decimals)\n            );\n            elizaLogger.log(\n                `Transferring: ${content.amount} tokens (${adjustedAmount} base units)`\n            );\n\n            // Rest of the existing working code...\n            const senderATA = getAssociatedTokenAddressSync(\n                mintPubkey,\n                senderKeypair.publicKey\n            );\n            const recipientATA = getAssociatedTokenAddressSync(\n                mintPubkey,\n                recipientPubkey\n            );\n\n            const instructions = [];\n\n            const recipientATAInfo =\n                await connection.getAccountInfo(recipientATA);\n            if (!recipientATAInfo) {\n                const { createAssociatedTokenAccountInstruction } =\n                    await import(\"@solana/spl-token\");\n                instructions.push(\n                    createAssociatedTokenAccountInstruction(\n                        senderKeypair.publicKey,\n                        recipientATA,\n                        recipientPubkey,\n                        mintPubkey\n                    )\n                );\n            }\n\n            instructions.push(\n                createTransferInstruction(\n                    senderATA,\n                    recipientATA,\n                    senderKeypair.publicKey,\n                    adjustedAmount\n                )\n            );\n\n            // Create and sign versioned transaction\n            const messageV0 = new TransactionMessage({\n                payerKey: senderKeypair.publicKey,\n                recentBlockhash: (await connection.getLatestBlockhash())\n                    .blockhash,\n                instructions,\n            }).compileToV0Message();\n\n            const transaction = new VersionedTransaction(messageV0);\n            transaction.sign([senderKeypair]);\n\n            // Send transaction\n            const signature = await connection.sendTransaction(transaction);\n\n            elizaLogger.log(\"Transfer successful:\", signature);\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} tokens to ${content.recipient}\\nTransaction: ${signature}`,\n                    content: {\n                        success: true,\n                        signature,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 69 EZSIS BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 69 EZSIS tokens now...\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 69 EZSIS tokens to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\\nTransaction: 5KtPn3DXXzHkb7VAVHZGwXJQqww39ASnrf7YkyJoF2qAGEpBEEGvRHLnnTG8ZVwKqNHMqSckWVGnsQAgfH5pbxEb\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    ActionExample,\n    booleanFooter,\n    composeContext,\n    Content,\n    elizaLogger,\n    Evaluator,\n    generateObjectArray,\n    generateTrueOrFalse,\n    IAgentRuntime,\n    Memory,\n    MemoryManager,\n    ModelClass,\n} from \"@elizaos/core\";\n// import { TrustScoreDatabase } from \"@elizaos/plugin-trustdb\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getWalletKey } from \"../keypairUtils.ts\";\nimport { TokenProvider } from \"../providers/token.ts\";\n// import { TrustScoreManager } from \"../providers/trustScoreProvider.ts\";\nimport { WalletProvider } from \"../providers/wallet.ts\";\n\nconst shouldProcessTemplate =\n    `# Task: Decide if the recent messages should be processed for token recommendations.\n\n    Look for messages that:\n    - Mention specific token tickers or contract addresses\n    - Contain words related to buying, selling, or trading tokens\n    - Express opinions or convictions about tokens\n\n    Based on the following conversation, should the messages be processed for recommendations? YES or NO\n\n    {{recentMessages}}\n\n    Should the messages be processed for recommendations? ` + booleanFooter;\n\nexport const formatRecommendations = (recommendations: Memory[]) => {\n    const messageStrings = recommendations\n        .reverse()\n        .map((rec: Memory) => `${(rec.content as Content)?.content}`);\n    const finalMessageStrings = messageStrings.join(\"\\n\");\n    return finalMessageStrings;\n};\n\nconst recommendationTemplate = `TASK: Extract recommendations to buy or sell memecoins from the conversation as an array of objects in JSON format.\n\n    Memecoins usually have a ticker and a contract address. Additionally, recommenders may make recommendations with some amount of conviction. The amount of conviction in their recommendation can be none, low, medium, or high. Recommenders can make recommendations to buy, not buy, sell and not sell.\n\n# START OF EXAMPLES\nThese are an examples of the expected output of this task:\n{{evaluationExamples}}\n# END OF EXAMPLES\n\n# INSTRUCTIONS\n\nExtract any new recommendations from the conversation that are not already present in the list of known recommendations below:\n{{recentRecommendations}}\n\n- Include the recommender's username\n- Try not to include already-known recommendations. If you think a recommendation is already known, but you're not sure, respond with alreadyKnown: true.\n- Set the conviction to 'none', 'low', 'medium' or 'high'\n- Set the recommendation type to 'buy', 'dont_buy', 'sell', or 'dont_sell'\n- Include the contract address and/or ticker if available\n\nRecent Messages:\n{{recentMessages}}\n\nResponse should be a JSON object array inside a JSON markdown block. Correct response format:\n\\`\\`\\`json\n[\n  {\n    \"recommender\": string,\n    \"ticker\": string | null,\n    \"contractAddress\": string | null,\n    \"type\": enum<buy|dont_buy|sell|dont_sell>,\n    \"conviction\": enum<none|low|medium|high>,\n    \"alreadyKnown\": boolean\n  },\n  ...\n]\n\\`\\`\\``;\n\nasync function handler(runtime: IAgentRuntime, message: Memory) {\n    elizaLogger.log(\"Evaluating for trust\");\n    const state = await runtime.composeState(message);\n\n    // if the database type is postgres, we don't want to run this because it relies on sql queries that are currently specific to sqlite. This check can be removed once the trust score provider is updated to work with postgres.\n    if (runtime.getSetting(\"POSTGRES_URL\")) {\n        elizaLogger.warn(\"skipping trust evaluator because db is postgres\");\n        return [];\n    }\n\n    const { agentId, roomId } = state;\n\n    // Check if we should process the messages\n    const shouldProcessContext = composeContext({\n        state,\n        template: shouldProcessTemplate,\n    });\n\n    const shouldProcess = await generateTrueOrFalse({\n        context: shouldProcessContext,\n        modelClass: ModelClass.SMALL,\n        runtime,\n    });\n\n    if (!shouldProcess) {\n        elizaLogger.log(\"Skipping process\");\n        return [];\n    }\n\n    elizaLogger.log(\"Processing recommendations\");\n\n    // Get recent recommendations\n    const recommendationsManager = new MemoryManager({\n        runtime,\n        tableName: \"recommendations\",\n    });\n\n    const recentRecommendations = await recommendationsManager.getMemories({\n        roomId,\n        count: 20,\n    });\n\n    const context = composeContext({\n        state: {\n            ...state,\n            recentRecommendations: formatRecommendations(recentRecommendations),\n        },\n        template: recommendationTemplate,\n    });\n\n    const recommendations = await generateObjectArray({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n    });\n\n    elizaLogger.log(\"recommendations\", recommendations);\n\n    if (!recommendations) {\n        return [];\n    }\n\n    // If the recommendation is already known or corrupted, remove it\n    const filteredRecommendations = recommendations.filter((rec) => {\n        return (\n            !rec.alreadyKnown &&\n            (rec.ticker || rec.contractAddress) &&\n            rec.recommender &&\n            rec.conviction &&\n            rec.recommender.trim() !== \"\"\n        );\n    });\n\n    const { publicKey } = await getWalletKey(runtime, false);\n\n    for (const rec of filteredRecommendations) {\n        // create the wallet provider and token provider\n        const walletProvider = new WalletProvider(\n            new Connection(\n                runtime.getSetting(\"SOLANA_RPC_URL\") ||\n                    \"https://api.mainnet-beta.solana.com\"\n            ),\n            publicKey\n        );\n        const tokenProvider = new TokenProvider(\n            rec.contractAddress,\n            walletProvider,\n            runtime.cacheManager\n        );\n\n        // TODO: Check to make sure the contract address is valid, it's the right one, etc\n\n        //\n        if (!rec.contractAddress) {\n            const tokenAddress = await tokenProvider.getTokenFromWallet(\n                runtime,\n                rec.ticker\n            );\n            rec.contractAddress = tokenAddress;\n            if (!tokenAddress) {\n                // try to search for the symbol and return the contract address with they highest liquidity and market cap\n                const result = await tokenProvider.searchDexScreenerData(\n                    rec.ticker\n                );\n                const tokenAddress = result?.baseToken?.address;\n                rec.contractAddress = tokenAddress;\n                if (!tokenAddress) {\n                    elizaLogger.warn(\"Could not find contract address for token\");\n                    continue;\n                }\n            }\n        }\n\n        // create the trust score manager\n\n        // const trustScoreDb = new TrustScoreDatabase(runtime.databaseAdapter.db);\n        // const trustScoreManager = new TrustScoreManager(\n        //     runtime,\n        //     tokenProvider,\n        //     trustScoreDb\n        // );\n\n        // get actors from the database\n        const participants =\n            await runtime.databaseAdapter.getParticipantsForRoom(\n                message.roomId\n            );\n\n        // find the first user Id from a user with the username that we extracted\n        const user = participants.find(async (actor) => {\n            const user = await runtime.databaseAdapter.getAccountById(actor);\n            return (\n                user.name.toLowerCase().trim() ===\n                rec.recommender.toLowerCase().trim()\n            );\n        });\n\n        if (!user) {\n            elizaLogger.warn(\"Could not find user: \", rec.recommender);\n            continue;\n        }\n\n        const account = await runtime.databaseAdapter.getAccountById(user);\n        const userId = account.id;\n\n        const recMemory = {\n            userId,\n            agentId,\n            content: { text: JSON.stringify(rec) },\n            roomId,\n            createdAt: Date.now(),\n        };\n\n        await recommendationsManager.createMemory(recMemory, true);\n\n        elizaLogger.log(\"recommendationsManager\", rec);\n\n        // - from here we just need to make sure code is right\n\n        // buy, dont buy, sell, dont sell\n\n        const buyAmounts = await tokenProvider.calculateBuyAmounts();\n\n        let buyAmount = buyAmounts[rec.conviction.toLowerCase().trim()];\n        if (!buyAmount) {\n            // handle annoying cases\n            // for now just put in 10 sol\n            buyAmount = 10;\n        }\n\n        // TODO: is this is a buy, sell, dont buy, or dont sell?\n        const shouldTrade = await tokenProvider.shouldTradeToken();\n\n        if (!shouldTrade) {\n            elizaLogger.warn(\n                \"There might be a problem with the token, not trading\"\n            );\n            continue;\n        }\n\n        switch (rec.type) {\n            case \"buy\":\n                // // for now, lets just assume buy only, but we should implement\n                // await trustScoreManager.createTradePerformance(\n                //     runtime,\n                //     rec.contractAddress,\n                //     userId,\n                //     {\n                //         buy_amount: rec.buyAmount,\n                //         is_simulation: true,\n                //     }\n                // );\n                break;\n            case \"sell\":\n            case \"dont_sell\":\n            case \"dont_buy\":\n                elizaLogger.warn(\"Not implemented\");\n                break;\n        }\n    }\n\n    return filteredRecommendations;\n}\n\nexport const trustEvaluator: Evaluator = {\n    name: \"EXTRACT_RECOMMENDATIONS\",\n    similes: [\n        \"GET_RECOMMENDATIONS\",\n        \"EXTRACT_TOKEN_RECS\",\n        \"EXTRACT_MEMECOIN_RECS\",\n    ],\n    alwaysRun: true,\n    validate: async (\n        runtime: IAgentRuntime,\n        message: Memory\n    ): Promise<boolean> => {\n        if (message.content.text.length < 5) {\n            return false;\n        }\n\n        return message.userId !== message.agentId;\n    },\n    description:\n        \"Extract recommendations to buy or sell memecoins/tokens from the conversation, including details like ticker, contract address, conviction level, and recommender username.\",\n    handler,\n    examples: [\n        {\n            context: `Actors in the scene:\n{{user1}}: Experienced DeFi degen. Constantly chasing high yield farms.\n{{user2}}: New to DeFi, learning the ropes.\n\nRecommendations about the actors:\nNone`,\n            messages: [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Yo, have you checked out $SOLARUG? Dope new yield aggregator on Solana.\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"Nah, I'm still trying to wrap my head around how yield farming even works haha. Is it risky?\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"I mean, there's always risk in DeFi, but the $SOLARUG devs seem legit. Threw a few sol into the FCweoTfJ128jGgNEXgdfTXdEZVk58Bz9trCemr6sXNx9 vault, farming's been smooth so far.\",\n                    },\n                },\n            ] as ActionExample[],\n            outcome: `\\`\\`\\`json\n[\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"SOLARUG\",\n    \"contractAddress\": \"FCweoTfJ128jGgNEXgdfTXdEZVk58Bz9trCemr6sXNx9\",\n    \"type\": \"buy\",\n    \"conviction\": \"medium\",\n    \"alreadyKnown\": false\n  }\n]\n\\`\\`\\``,\n        },\n\n        {\n            context: `Actors in the scene:\n{{user1}}: Solana maximalist. Believes Solana will flip Ethereum.\n{{user2}}: Multichain proponent. Holds both SOL and ETH.\n\nRecommendations about the actors:\n{{user1}} has previously promoted $COPETOKEN and $SOYLENT.`,\n            messages: [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"If you're not long $SOLVAULT at 7tRzKud6FBVFEhYqZS3CuQ2orLRM21bdisGykL5Sr4Dx, you're missing out. This will be the blackhole of Solana liquidity.\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"Idk man, feels like there's a new 'vault' or 'reserve' token every week on Sol. What happened to $COPETOKEN and $SOYLENT that you were shilling before?\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"$COPETOKEN and $SOYLENT had their time, I took profits near the top. But $SOLVAULT is different, it has actual utility. Do what you want, but don't say I didn't warn you when this 50x's and you're left holding your $ETH bags.\",\n                    },\n                },\n            ] as ActionExample[],\n            outcome: `\\`\\`\\`json\n[\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"COPETOKEN\",\n    \"contractAddress\": null,\n    \"type\": \"sell\",\n    \"conviction\": \"low\",\n    \"alreadyKnown\": true\n  },\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"SOYLENT\",\n    \"contractAddress\": null,\n    \"type\": \"sell\",\n    \"conviction\": \"low\",\n    \"alreadyKnown\": true\n  },\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"SOLVAULT\",\n    \"contractAddress\": \"7tRzKud6FBVFEhYqZS3CuQ2orLRM21bdisGykL5Sr4Dx\",\n    \"type\": \"buy\",\n    \"conviction\": \"high\",\n    \"alreadyKnown\": false\n  }\n]\n\\`\\`\\``,\n        },\n\n        {\n            context: `Actors in the scene:\n{{user1}}: Self-proclaimed Solana alpha caller. Allegedly has insider info.\n{{user2}}: Degen gambler. Will ape into any hyped token.\n\nRecommendations about the actors:\nNone`,\n            messages: [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"I normally don't do this, but I like you anon, so I'll let you in on some alpha. $ROULETTE at 48vV5y4DRH1Adr1bpvSgFWYCjLLPtHYBqUSwNc2cmCK2 is going to absolutely send it soon. You didn't hear it from me 🤐\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"Oh shit, insider info from the alpha god himself? Say no more, I'm aping in hard.\",\n                    },\n                },\n            ] as ActionExample[],\n            outcome: `\\`\\`\\`json\n[\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"ROULETTE\",\n    \"contractAddress\": \"48vV5y4DRH1Adr1bpvSgFWYCjLLPtHYBqUSwNc2cmCK2\",\n    \"type\": \"buy\",\n    \"conviction\": \"high\",\n    \"alreadyKnown\": false\n  }\n]\n\\`\\`\\``,\n        },\n\n        {\n            context: `Actors in the scene:\n{{user1}}: NFT collector and trader. Bullish on Solana NFTs.\n{{user2}}: Only invests based on fundamentals. Sees all NFTs as worthless JPEGs.\n\nRecommendations about the actors:\nNone\n`,\n            messages: [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"GM. I'm heavily accumulating $PIXELAPE, the token for the Pixel Ape Yacht Club NFT collection. 10x is inevitable.\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"NFTs are a scam bro. There's no underlying value. You're essentially trading worthless JPEGs.\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Fun staying poor 🤡 $PIXELAPE is about to moon and you'll be left behind.\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"Whatever man, I'm not touching that shit with a ten foot pole. Have fun holding your bags.\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Don't need luck where I'm going 😎 Once $PIXELAPE at 3hAKKmR6XyBooQBPezCbUMhrmcyTkt38sRJm2thKytWc takes off, you'll change your tune.\",\n                    },\n                },\n            ],\n            outcome: `\\`\\`\\`json\n[\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"PIXELAPE\",\n    \"contractAddress\": \"3hAKKmR6XyBooQBPezCbUMhrmcyTkt38sRJm2thKytWc\",\n    \"type\": \"buy\",\n    \"conviction\": \"high\",\n    \"alreadyKnown\": false\n  }\n]\n\\`\\`\\``,\n        },\n\n        {\n            context: `Actors in the scene:\n{{user1}}: Contrarian investor. Bets against hyped projects.\n{{user2}}: Trend follower. Buys tokens that are currently popular.\n\nRecommendations about the actors:\nNone`,\n            messages: [\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"$SAMOYED is the talk of CT right now. Making serious moves. Might have to get a bag.\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Whenever a token is the 'talk of CT', that's my cue to short it. $SAMOYED is going to dump hard, mark my words.\",\n                    },\n                },\n                {\n                    user: \"{{user2}}\",\n                    content: {\n                        text: \"Idk man, the hype seems real this time. 5TQwHyZbedaH4Pcthj1Hxf5GqcigL6qWuB7YEsBtqvhr chart looks bullish af.\",\n                    },\n                },\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Hype is always real until it isn't. I'm taking out a fat short position here. Don't say I didn't warn you when this crashes 90% and you're left holding the flaming bags.\",\n                    },\n                },\n            ],\n            outcome: `\\`\\`\\`json\n[\n  {\n    \"recommender\": \"{{user2}}\",\n    \"ticker\": \"SAMOYED\",\n    \"contractAddress\": \"5TQwHyZbedaH4Pcthj1Hxf5GqcigL6qWuB7YEsBtqvhr\",\n    \"type\": \"buy\",\n    \"conviction\": \"medium\",\n    \"alreadyKnown\": false\n  },\n  {\n    \"recommender\": \"{{user1}}\",\n    \"ticker\": \"SAMOYED\",\n    \"contractAddress\": \"5TQwHyZbedaH4Pcthj1Hxf5GqcigL6qWuB7YEsBtqvhr\",\n    \"type\": \"dont_buy\",\n    \"conviction\": \"high\",\n    \"alreadyKnown\": false\n  }\n]\n\\`\\`\\``,\n        },\n    ],\n};\n","import {\n    IAgentRuntime,\n    Memory,\n    Provider,\n    State,\n    elizaLogger,\n    ICacheManager,\n    settings,\n} from \"@elizaos/core\";\nimport {\n    DexScreenerData,\n    DexScreenerPair,\n    HolderData,\n    ProcessedTokenData,\n    TokenSecurityData,\n    TokenTradeData,\n    CalculatedBuyAmounts,\n    Prices,\n    TokenCodex,\n} from \"../types/token.ts\";\nimport NodeCache from \"node-cache\";\nimport * as path from \"path\";\nimport { toBN } from \"../bignumber.ts\";\nimport { WalletProvider, Item } from \"./wallet.ts\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getWalletKey } from \"../keypairUtils.ts\";\n\nconst PROVIDER_CONFIG = {\n    BIRDEYE_API: \"https://public-api.birdeye.so\",\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    DEFAULT_RPC: \"https://api.mainnet-beta.solana.com\",\n    TOKEN_ADDRESSES: {\n        SOL: \"So11111111111111111111111111111111111111112\",\n        BTC: \"qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL\",\n        ETH: \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        Example: \"2weMjPLLybRMMva1fM3U31goWWrCpF59CHWNhnCJ9Vyh\",\n    },\n    TOKEN_SECURITY_ENDPOINT: \"/defi/token_security?address=\",\n    TOKEN_TRADE_DATA_ENDPOINT: \"/defi/v3/token/trade-data/single?address=\",\n    DEX_SCREENER_API: \"https://api.dexscreener.com/latest/dex/tokens/\",\n    MAIN_WALLET: \"\",\n};\n\nexport class TokenProvider {\n    private cache: NodeCache;\n    private cacheKey: string = \"solana/tokens\";\n    private NETWORK_ID = 1399811149;\n    private GRAPHQL_ENDPOINT = \"https://graph.codex.io/graphql\";\n\n    constructor(\n        //  private connection: Connection,\n        private tokenAddress: string,\n        private walletProvider: WalletProvider,\n        private cacheManager: ICacheManager\n    ) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // 5 minutes cache\n    }\n\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key)\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + 5 * 60 * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private async fetchWithRetry(\n        url: string,\n        options: RequestInit = {}\n    ): Promise<any> {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const response = await fetch(url, {\n                    ...options,\n                    headers: {\n                        Accept: \"application/json\",\n                        \"x-chain\": \"solana\",\n                        \"X-API-KEY\": settings.BIRDEYE_API_KEY || \"\",\n                        ...options.headers,\n                    },\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(\n                        `HTTP error! status: ${response.status}, message: ${errorText}`\n                    );\n                }\n\n                const data = await response.json();\n                return data;\n            } catch (error) {\n                elizaLogger.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error as Error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    const delay = PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i);\n                    elizaLogger.log(`Waiting ${delay}ms before retrying...`);\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n            }\n        }\n\n        elizaLogger.error(\n            \"All attempts failed. Throwing the last error:\",\n            lastError\n        );\n        throw lastError;\n    }\n\n    async getTokensInWallet(runtime: IAgentRuntime): Promise<Item[]> {\n        const walletInfo =\n            await this.walletProvider.fetchPortfolioValue(runtime);\n        const items = walletInfo.items;\n        return items;\n    }\n\n    // check if the token symbol is in the wallet\n    async getTokenFromWallet(runtime: IAgentRuntime, tokenSymbol: string) {\n        try {\n            const items = await this.getTokensInWallet(runtime);\n            const token = items.find((item) => item.symbol === tokenSymbol);\n\n            if (token) {\n                return token.address;\n            } else {\n                return null;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error checking token in wallet:\", error);\n            return null;\n        }\n    }\n\n    async fetchTokenCodex(): Promise<TokenCodex> {\n        try {\n            const cacheKey = `token_${this.tokenAddress}`;\n            const cachedData = await this.getCachedData<TokenCodex>(cacheKey);\n            if (cachedData) {\n                elizaLogger.log(\n                    `Returning cached token data for ${this.tokenAddress}.`\n                );\n                return cachedData;\n            }\n            const query = `\n            query Token($address: String!, $networkId: Int!) {\n              token(input: { address: $address, networkId: $networkId }) {\n                id\n                address\n                cmcId\n                decimals\n                name\n                symbol\n                totalSupply\n                isScam\n                info {\n                  circulatingSupply\n                  imageThumbUrl\n                }\n                explorerData {\n                  blueCheckmark\n                  description\n                  tokenType\n                }\n              }\n            }\n          `;\n\n            const variables = {\n                address: this.tokenAddress,\n                networkId: this.NETWORK_ID, // Replace with your network ID\n            };\n\n            const response = await fetch(this.GRAPHQL_ENDPOINT, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: settings.CODEX_API_KEY,\n                },\n                body: JSON.stringify({\n                    query,\n                    variables,\n                }),\n            }).then((res) => res.json());\n\n            const token = response.data?.data?.token;\n\n            if (!token) {\n                throw new Error(`No data returned for token ${tokenAddress}`);\n            }\n\n            this.setCachedData(cacheKey, token);\n\n            return {\n                id: token.id,\n                address: token.address,\n                cmcId: token.cmcId,\n                decimals: token.decimals,\n                name: token.name,\n                symbol: token.symbol,\n                totalSupply: token.totalSupply,\n                circulatingSupply: token.info?.circulatingSupply,\n                imageThumbUrl: token.info?.imageThumbUrl,\n                blueCheckmark: token.explorerData?.blueCheckmark,\n                isScam: token.isScam ? true : false,\n            };\n        } catch (error) {\n            elizaLogger.error(\n                \"Error fetching token data from Codex:\",\n                error.message\n            );\n            return {} as TokenCodex;\n        }\n    }\n\n    async fetchPrices(): Promise<Prices> {\n        try {\n            const cacheKey = \"prices\";\n            const cachedData = await this.getCachedData<Prices>(cacheKey);\n            if (cachedData) {\n                elizaLogger.log(\"Returning cached prices.\");\n                return cachedData;\n            }\n            const { SOL, BTC, ETH } = PROVIDER_CONFIG.TOKEN_ADDRESSES;\n            const tokens = [SOL, BTC, ETH];\n            const prices: Prices = {\n                solana: { usd: \"0\" },\n                bitcoin: { usd: \"0\" },\n                ethereum: { usd: \"0\" },\n            };\n\n            for (const token of tokens) {\n                const response = await this.fetchWithRetry(\n                    `${PROVIDER_CONFIG.BIRDEYE_API}/defi/price?address=${token}`,\n                    {\n                        headers: {\n                            \"x-chain\": \"solana\",\n                        },\n                    }\n                );\n\n                if (response?.data?.value) {\n                    const price = response.data.value.toString();\n                    prices[\n                        token === SOL\n                            ? \"solana\"\n                            : token === BTC\n                              ? \"bitcoin\"\n                              : \"ethereum\"\n                    ].usd = price;\n                } else {\n                    elizaLogger.warn(\n                        `No price data available for token: ${token}`\n                    );\n                }\n            }\n            this.setCachedData(cacheKey, prices);\n            return prices;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching prices:\", error);\n            throw error;\n        }\n    }\n    async calculateBuyAmounts(): Promise<CalculatedBuyAmounts> {\n        const dexScreenerData = await this.fetchDexScreenerData();\n        const prices = await this.fetchPrices();\n        const solPrice = toBN(prices.solana.usd);\n\n        if (!dexScreenerData || dexScreenerData.pairs.length === 0) {\n            return { none: 0, low: 0, medium: 0, high: 0 };\n        }\n\n        // Get the first pair\n        const pair = dexScreenerData.pairs[0];\n        const { liquidity, marketCap } = pair;\n        if (!liquidity || !marketCap) {\n            return { none: 0, low: 0, medium: 0, high: 0 };\n        }\n\n        if (liquidity.usd === 0) {\n            return { none: 0, low: 0, medium: 0, high: 0 };\n        }\n        if (marketCap < 100000) {\n            return { none: 0, low: 0, medium: 0, high: 0 };\n        }\n\n        // impact percentages based on liquidity\n        const impactPercentages = {\n            LOW: 0.01, // 1% of liquidity\n            MEDIUM: 0.05, // 5% of liquidity\n            HIGH: 0.1, // 10% of liquidity\n        };\n\n        // Calculate buy amounts in USD\n        const lowBuyAmountUSD = liquidity.usd * impactPercentages.LOW;\n        const mediumBuyAmountUSD = liquidity.usd * impactPercentages.MEDIUM;\n        const highBuyAmountUSD = liquidity.usd * impactPercentages.HIGH;\n\n        // Convert each buy amount to SOL\n        const lowBuyAmountSOL = toBN(lowBuyAmountUSD).div(solPrice).toNumber();\n        const mediumBuyAmountSOL = toBN(mediumBuyAmountUSD)\n            .div(solPrice)\n            .toNumber();\n        const highBuyAmountSOL = toBN(highBuyAmountUSD)\n            .div(solPrice)\n            .toNumber();\n\n        return {\n            none: 0,\n            low: lowBuyAmountSOL,\n            medium: mediumBuyAmountSOL,\n            high: highBuyAmountSOL,\n        };\n    }\n\n    async fetchTokenSecurity(): Promise<TokenSecurityData> {\n        const cacheKey = `tokenSecurity_${this.tokenAddress}`;\n        const cachedData =\n            await this.getCachedData<TokenSecurityData>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\n                `Returning cached token security data for ${this.tokenAddress}.`\n            );\n            return cachedData;\n        }\n        const url = `${PROVIDER_CONFIG.BIRDEYE_API}${PROVIDER_CONFIG.TOKEN_SECURITY_ENDPOINT}${this.tokenAddress}`;\n        const data = await this.fetchWithRetry(url);\n\n        if (!data?.success || !data?.data) {\n            throw new Error(\"No token security data available\");\n        }\n\n        const security: TokenSecurityData = {\n            ownerBalance: data.data.ownerBalance,\n            creatorBalance: data.data.creatorBalance,\n            ownerPercentage: data.data.ownerPercentage,\n            creatorPercentage: data.data.creatorPercentage,\n            top10HolderBalance: data.data.top10HolderBalance,\n            top10HolderPercent: data.data.top10HolderPercent,\n        };\n        this.setCachedData(cacheKey, security);\n        elizaLogger.log(`Token security data cached for ${this.tokenAddress}.`);\n\n        return security;\n    }\n\n    async fetchTokenTradeData(): Promise<TokenTradeData> {\n        const cacheKey = `tokenTradeData_${this.tokenAddress}`;\n        const cachedData = await this.getCachedData<TokenTradeData>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\n                `Returning cached token trade data for ${this.tokenAddress}.`\n            );\n            return cachedData;\n        }\n\n        const url = `${PROVIDER_CONFIG.BIRDEYE_API}${PROVIDER_CONFIG.TOKEN_TRADE_DATA_ENDPOINT}${this.tokenAddress}`;\n        const options = {\n            method: \"GET\",\n            headers: {\n                accept: \"application/json\",\n                \"X-API-KEY\": settings.BIRDEYE_API_KEY || \"\",\n            },\n        };\n\n        const data = await fetch(url, options)\n            .then((res) => res.json())\n            .catch((err) => elizaLogger.error(err));\n\n        if (!data?.success || !data?.data) {\n            throw new Error(\"No token trade data available\");\n        }\n\n        const tradeData: TokenTradeData = {\n            address: data.data.address,\n            holder: data.data.holder,\n            market: data.data.market,\n            last_trade_unix_time: data.data.last_trade_unix_time,\n            last_trade_human_time: data.data.last_trade_human_time,\n            price: data.data.price,\n            history_30m_price: data.data.history_30m_price,\n            price_change_30m_percent: data.data.price_change_30m_percent,\n            history_1h_price: data.data.history_1h_price,\n            price_change_1h_percent: data.data.price_change_1h_percent,\n            history_2h_price: data.data.history_2h_price,\n            price_change_2h_percent: data.data.price_change_2h_percent,\n            history_4h_price: data.data.history_4h_price,\n            price_change_4h_percent: data.data.price_change_4h_percent,\n            history_6h_price: data.data.history_6h_price,\n            price_change_6h_percent: data.data.price_change_6h_percent,\n            history_8h_price: data.data.history_8h_price,\n            price_change_8h_percent: data.data.price_change_8h_percent,\n            history_12h_price: data.data.history_12h_price,\n            price_change_12h_percent: data.data.price_change_12h_percent,\n            history_24h_price: data.data.history_24h_price,\n            price_change_24h_percent: data.data.price_change_24h_percent,\n            unique_wallet_30m: data.data.unique_wallet_30m,\n            unique_wallet_history_30m: data.data.unique_wallet_history_30m,\n            unique_wallet_30m_change_percent:\n                data.data.unique_wallet_30m_change_percent,\n            unique_wallet_1h: data.data.unique_wallet_1h,\n            unique_wallet_history_1h: data.data.unique_wallet_history_1h,\n            unique_wallet_1h_change_percent:\n                data.data.unique_wallet_1h_change_percent,\n            unique_wallet_2h: data.data.unique_wallet_2h,\n            unique_wallet_history_2h: data.data.unique_wallet_history_2h,\n            unique_wallet_2h_change_percent:\n                data.data.unique_wallet_2h_change_percent,\n            unique_wallet_4h: data.data.unique_wallet_4h,\n            unique_wallet_history_4h: data.data.unique_wallet_history_4h,\n            unique_wallet_4h_change_percent:\n                data.data.unique_wallet_4h_change_percent,\n            unique_wallet_8h: data.data.unique_wallet_8h,\n            unique_wallet_history_8h: data.data.unique_wallet_history_8h,\n            unique_wallet_8h_change_percent:\n                data.data.unique_wallet_8h_change_percent,\n            unique_wallet_24h: data.data.unique_wallet_24h,\n            unique_wallet_history_24h: data.data.unique_wallet_history_24h,\n            unique_wallet_24h_change_percent:\n                data.data.unique_wallet_24h_change_percent,\n            trade_30m: data.data.trade_30m,\n            trade_history_30m: data.data.trade_history_30m,\n            trade_30m_change_percent: data.data.trade_30m_change_percent,\n            sell_30m: data.data.sell_30m,\n            sell_history_30m: data.data.sell_history_30m,\n            sell_30m_change_percent: data.data.sell_30m_change_percent,\n            buy_30m: data.data.buy_30m,\n            buy_history_30m: data.data.buy_history_30m,\n            buy_30m_change_percent: data.data.buy_30m_change_percent,\n            volume_30m: data.data.volume_30m,\n            volume_30m_usd: data.data.volume_30m_usd,\n            volume_history_30m: data.data.volume_history_30m,\n            volume_history_30m_usd: data.data.volume_history_30m_usd,\n            volume_30m_change_percent: data.data.volume_30m_change_percent,\n            volume_buy_30m: data.data.volume_buy_30m,\n            volume_buy_30m_usd: data.data.volume_buy_30m_usd,\n            volume_buy_history_30m: data.data.volume_buy_history_30m,\n            volume_buy_history_30m_usd: data.data.volume_buy_history_30m_usd,\n            volume_buy_30m_change_percent:\n                data.data.volume_buy_30m_change_percent,\n            volume_sell_30m: data.data.volume_sell_30m,\n            volume_sell_30m_usd: data.data.volume_sell_30m_usd,\n            volume_sell_history_30m: data.data.volume_sell_history_30m,\n            volume_sell_history_30m_usd: data.data.volume_sell_history_30m_usd,\n            volume_sell_30m_change_percent:\n                data.data.volume_sell_30m_change_percent,\n            trade_1h: data.data.trade_1h,\n            trade_history_1h: data.data.trade_history_1h,\n            trade_1h_change_percent: data.data.trade_1h_change_percent,\n            sell_1h: data.data.sell_1h,\n            sell_history_1h: data.data.sell_history_1h,\n            sell_1h_change_percent: data.data.sell_1h_change_percent,\n            buy_1h: data.data.buy_1h,\n            buy_history_1h: data.data.buy_history_1h,\n            buy_1h_change_percent: data.data.buy_1h_change_percent,\n            volume_1h: data.data.volume_1h,\n            volume_1h_usd: data.data.volume_1h_usd,\n            volume_history_1h: data.data.volume_history_1h,\n            volume_history_1h_usd: data.data.volume_history_1h_usd,\n            volume_1h_change_percent: data.data.volume_1h_change_percent,\n            volume_buy_1h: data.data.volume_buy_1h,\n            volume_buy_1h_usd: data.data.volume_buy_1h_usd,\n            volume_buy_history_1h: data.data.volume_buy_history_1h,\n            volume_buy_history_1h_usd: data.data.volume_buy_history_1h_usd,\n            volume_buy_1h_change_percent:\n                data.data.volume_buy_1h_change_percent,\n            volume_sell_1h: data.data.volume_sell_1h,\n            volume_sell_1h_usd: data.data.volume_sell_1h_usd,\n            volume_sell_history_1h: data.data.volume_sell_history_1h,\n            volume_sell_history_1h_usd: data.data.volume_sell_history_1h_usd,\n            volume_sell_1h_change_percent:\n                data.data.volume_sell_1h_change_percent,\n            trade_2h: data.data.trade_2h,\n            trade_history_2h: data.data.trade_history_2h,\n            trade_2h_change_percent: data.data.trade_2h_change_percent,\n            sell_2h: data.data.sell_2h,\n            sell_history_2h: data.data.sell_history_2h,\n            sell_2h_change_percent: data.data.sell_2h_change_percent,\n            buy_2h: data.data.buy_2h,\n            buy_history_2h: data.data.buy_history_2h,\n            buy_2h_change_percent: data.data.buy_2h_change_percent,\n            volume_2h: data.data.volume_2h,\n            volume_2h_usd: data.data.volume_2h_usd,\n            volume_history_2h: data.data.volume_history_2h,\n            volume_history_2h_usd: data.data.volume_history_2h_usd,\n            volume_2h_change_percent: data.data.volume_2h_change_percent,\n            volume_buy_2h: data.data.volume_buy_2h,\n            volume_buy_2h_usd: data.data.volume_buy_2h_usd,\n            volume_buy_history_2h: data.data.volume_buy_history_2h,\n            volume_buy_history_2h_usd: data.data.volume_buy_history_2h_usd,\n            volume_buy_2h_change_percent:\n                data.data.volume_buy_2h_change_percent,\n            volume_sell_2h: data.data.volume_sell_2h,\n            volume_sell_2h_usd: data.data.volume_sell_2h_usd,\n            volume_sell_history_2h: data.data.volume_sell_history_2h,\n            volume_sell_history_2h_usd: data.data.volume_sell_history_2h_usd,\n            volume_sell_2h_change_percent:\n                data.data.volume_sell_2h_change_percent,\n            trade_4h: data.data.trade_4h,\n            trade_history_4h: data.data.trade_history_4h,\n            trade_4h_change_percent: data.data.trade_4h_change_percent,\n            sell_4h: data.data.sell_4h,\n            sell_history_4h: data.data.sell_history_4h,\n            sell_4h_change_percent: data.data.sell_4h_change_percent,\n            buy_4h: data.data.buy_4h,\n            buy_history_4h: data.data.buy_history_4h,\n            buy_4h_change_percent: data.data.buy_4h_change_percent,\n            volume_4h: data.data.volume_4h,\n            volume_4h_usd: data.data.volume_4h_usd,\n            volume_history_4h: data.data.volume_history_4h,\n            volume_history_4h_usd: data.data.volume_history_4h_usd,\n            volume_4h_change_percent: data.data.volume_4h_change_percent,\n            volume_buy_4h: data.data.volume_buy_4h,\n            volume_buy_4h_usd: data.data.volume_buy_4h_usd,\n            volume_buy_history_4h: data.data.volume_buy_history_4h,\n            volume_buy_history_4h_usd: data.data.volume_buy_history_4h_usd,\n            volume_buy_4h_change_percent:\n                data.data.volume_buy_4h_change_percent,\n            volume_sell_4h: data.data.volume_sell_4h,\n            volume_sell_4h_usd: data.data.volume_sell_4h_usd,\n            volume_sell_history_4h: data.data.volume_sell_history_4h,\n            volume_sell_history_4h_usd: data.data.volume_sell_history_4h_usd,\n            volume_sell_4h_change_percent:\n                data.data.volume_sell_4h_change_percent,\n            trade_8h: data.data.trade_8h,\n            trade_history_8h: data.data.trade_history_8h,\n            trade_8h_change_percent: data.data.trade_8h_change_percent,\n            sell_8h: data.data.sell_8h,\n            sell_history_8h: data.data.sell_history_8h,\n            sell_8h_change_percent: data.data.sell_8h_change_percent,\n            buy_8h: data.data.buy_8h,\n            buy_history_8h: data.data.buy_history_8h,\n            buy_8h_change_percent: data.data.buy_8h_change_percent,\n            volume_8h: data.data.volume_8h,\n            volume_8h_usd: data.data.volume_8h_usd,\n            volume_history_8h: data.data.volume_history_8h,\n            volume_history_8h_usd: data.data.volume_history_8h_usd,\n            volume_8h_change_percent: data.data.volume_8h_change_percent,\n            volume_buy_8h: data.data.volume_buy_8h,\n            volume_buy_8h_usd: data.data.volume_buy_8h_usd,\n            volume_buy_history_8h: data.data.volume_buy_history_8h,\n            volume_buy_history_8h_usd: data.data.volume_buy_history_8h_usd,\n            volume_buy_8h_change_percent:\n                data.data.volume_buy_8h_change_percent,\n            volume_sell_8h: data.data.volume_sell_8h,\n            volume_sell_8h_usd: data.data.volume_sell_8h_usd,\n            volume_sell_history_8h: data.data.volume_sell_history_8h,\n            volume_sell_history_8h_usd: data.data.volume_sell_history_8h_usd,\n            volume_sell_8h_change_percent:\n                data.data.volume_sell_8h_change_percent,\n            trade_24h: data.data.trade_24h,\n            trade_history_24h: data.data.trade_history_24h,\n            trade_24h_change_percent: data.data.trade_24h_change_percent,\n            sell_24h: data.data.sell_24h,\n            sell_history_24h: data.data.sell_history_24h,\n            sell_24h_change_percent: data.data.sell_24h_change_percent,\n            buy_24h: data.data.buy_24h,\n            buy_history_24h: data.data.buy_history_24h,\n            buy_24h_change_percent: data.data.buy_24h_change_percent,\n            volume_24h: data.data.volume_24h,\n            volume_24h_usd: data.data.volume_24h_usd,\n            volume_history_24h: data.data.volume_history_24h,\n            volume_history_24h_usd: data.data.volume_history_24h_usd,\n            volume_24h_change_percent: data.data.volume_24h_change_percent,\n            volume_buy_24h: data.data.volume_buy_24h,\n            volume_buy_24h_usd: data.data.volume_buy_24h_usd,\n            volume_buy_history_24h: data.data.volume_buy_history_24h,\n            volume_buy_history_24h_usd: data.data.volume_buy_history_24h_usd,\n            volume_buy_24h_change_percent:\n                data.data.volume_buy_24h_change_percent,\n            volume_sell_24h: data.data.volume_sell_24h,\n            volume_sell_24h_usd: data.data.volume_sell_24h_usd,\n            volume_sell_history_24h: data.data.volume_sell_history_24h,\n            volume_sell_history_24h_usd: data.data.volume_sell_history_24h_usd,\n            volume_sell_24h_change_percent:\n                data.data.volume_sell_24h_change_percent,\n        };\n        this.setCachedData(cacheKey, tradeData);\n        return tradeData;\n    }\n\n    async fetchDexScreenerData(): Promise<DexScreenerData> {\n        const cacheKey = `dexScreenerData_${this.tokenAddress}`;\n        const cachedData = await this.getCachedData<DexScreenerData>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\"Returning cached DexScreener data.\");\n            return cachedData;\n        }\n\n        const url = `https://api.dexscreener.com/latest/dex/search?q=${this.tokenAddress}`;\n        try {\n            elizaLogger.log(\n                `Fetching DexScreener data for token: ${this.tokenAddress}`\n            );\n            const data = await fetch(url)\n                .then((res) => res.json())\n                .catch((err) => {\n                    elizaLogger.error(err);\n                });\n\n            if (!data || !data.pairs) {\n                throw new Error(\"No DexScreener data available\");\n            }\n\n            const dexData: DexScreenerData = {\n                schemaVersion: data.schemaVersion,\n                pairs: data.pairs,\n            };\n\n            // Cache the result\n            this.setCachedData(cacheKey, dexData);\n\n            return dexData;\n        } catch (error) {\n            elizaLogger.error(`Error fetching DexScreener data:`, error);\n            return {\n                schemaVersion: \"1.0.0\",\n                pairs: [],\n            };\n        }\n    }\n\n    async searchDexScreenerData(\n        symbol: string\n    ): Promise<DexScreenerPair | null> {\n        const cacheKey = `dexScreenerData_search_${symbol}`;\n        const cachedData = await this.getCachedData<DexScreenerData>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\"Returning cached search DexScreener data.\");\n            return this.getHighestLiquidityPair(cachedData);\n        }\n\n        const url = `https://api.dexscreener.com/latest/dex/search?q=${symbol}`;\n        try {\n            elizaLogger.log(`Fetching DexScreener data for symbol: ${symbol}`);\n            const data = await fetch(url)\n                .then((res) => res.json())\n                .catch((err) => {\n                    elizaLogger.error(err);\n                    return null;\n                });\n\n            if (!data || !data.pairs || data.pairs.length === 0) {\n                throw new Error(\"No DexScreener data available\");\n            }\n\n            const dexData: DexScreenerData = {\n                schemaVersion: data.schemaVersion,\n                pairs: data.pairs,\n            };\n\n            // Cache the result\n            this.setCachedData(cacheKey, dexData);\n\n            // Return the pair with the highest liquidity and market cap\n            return this.getHighestLiquidityPair(dexData);\n        } catch (error) {\n            elizaLogger.error(`Error fetching DexScreener data:`, error);\n            return null;\n        }\n    }\n    getHighestLiquidityPair(dexData: DexScreenerData): DexScreenerPair | null {\n        if (dexData.pairs.length === 0) {\n            return null;\n        }\n\n        // Sort pairs by both liquidity and market cap to get the highest one\n        return dexData.pairs.sort((a, b) => {\n            const liquidityDiff = b.liquidity.usd - a.liquidity.usd;\n            if (liquidityDiff !== 0) {\n                return liquidityDiff; // Higher liquidity comes first\n            }\n            return b.marketCap - a.marketCap; // If liquidity is equal, higher market cap comes first\n        })[0];\n    }\n\n    async analyzeHolderDistribution(\n        tradeData: TokenTradeData\n    ): Promise<string> {\n        // Define the time intervals to consider (e.g., 30m, 1h, 2h)\n        const intervals = [\n            {\n                period: \"30m\",\n                change: tradeData.unique_wallet_30m_change_percent,\n            },\n            { period: \"1h\", change: tradeData.unique_wallet_1h_change_percent },\n            { period: \"2h\", change: tradeData.unique_wallet_2h_change_percent },\n            { period: \"4h\", change: tradeData.unique_wallet_4h_change_percent },\n            { period: \"8h\", change: tradeData.unique_wallet_8h_change_percent },\n            {\n                period: \"24h\",\n                change: tradeData.unique_wallet_24h_change_percent,\n            },\n        ];\n\n        // Calculate the average change percentage\n        const validChanges = intervals\n            .map((interval) => interval.change)\n            .filter(\n                (change) => change !== null && change !== undefined\n            ) as number[];\n\n        if (validChanges.length === 0) {\n            return \"stable\";\n        }\n\n        const averageChange =\n            validChanges.reduce((acc, curr) => acc + curr, 0) /\n            validChanges.length;\n\n        const increaseThreshold = 10; // e.g., average change > 10%\n        const decreaseThreshold = -10; // e.g., average change < -10%\n\n        if (averageChange > increaseThreshold) {\n            return \"increasing\";\n        } else if (averageChange < decreaseThreshold) {\n            return \"decreasing\";\n        } else {\n            return \"stable\";\n        }\n    }\n\n    async fetchHolderList(): Promise<HolderData[]> {\n        const cacheKey = `holderList_${this.tokenAddress}`;\n        const cachedData = await this.getCachedData<HolderData[]>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\"Returning cached holder list.\");\n            return cachedData;\n        }\n\n        const allHoldersMap = new Map<string, number>();\n        let page = 1;\n        const limit = 1000;\n        let cursor;\n        //HELIOUS_API_KEY needs to be added\n        const url = `https://mainnet.helius-rpc.com/?api-key=${settings.HELIUS_API_KEY || \"\"}`;\n        elizaLogger.log({ url });\n\n        try {\n            while (true) {\n                const params = {\n                    limit: limit,\n                    displayOptions: {},\n                    mint: this.tokenAddress,\n                    cursor: cursor,\n                };\n                if (cursor != undefined) {\n                    params.cursor = cursor;\n                }\n                elizaLogger.log(`Fetching holders - Page ${page}`);\n                if (page > 2) {\n                    break;\n                }\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        jsonrpc: \"2.0\",\n                        id: \"helius-test\",\n                        method: \"getTokenAccounts\",\n                        params: params,\n                    }),\n                });\n\n                const data = await response.json();\n\n                if (\n                    !data ||\n                    !data.result ||\n                    !data.result.token_accounts ||\n                    data.result.token_accounts.length === 0\n                ) {\n                    elizaLogger.log(\n                        `No more holders found. Total pages fetched: ${page - 1}`\n                    );\n                    break;\n                }\n\n                elizaLogger.log(\n                    `Processing ${data.result.token_accounts.length} holders from page ${page}`\n                );\n\n                data.result.token_accounts.forEach((account: any) => {\n                    const owner = account.owner;\n                    const balance = parseFloat(account.amount);\n\n                    if (allHoldersMap.has(owner)) {\n                        allHoldersMap.set(\n                            owner,\n                            allHoldersMap.get(owner)! + balance\n                        );\n                    } else {\n                        allHoldersMap.set(owner, balance);\n                    }\n                });\n                cursor = data.result.cursor;\n                page++;\n            }\n\n            const holders: HolderData[] = Array.from(\n                allHoldersMap.entries()\n            ).map(([address, balance]) => ({\n                address,\n                balance: balance.toString(),\n            }));\n\n            elizaLogger.log(`Total unique holders fetched: ${holders.length}`);\n\n            // Cache the result\n            this.setCachedData(cacheKey, holders);\n\n            return holders;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching holder list from Helius:\", error);\n            throw new Error(\"Failed to fetch holder list from Helius.\");\n        }\n    }\n\n    async filterHighValueHolders(\n        tradeData: TokenTradeData\n    ): Promise<Array<{ holderAddress: string; balanceUsd: string }>> {\n        const holdersData = await this.fetchHolderList();\n\n        const tokenPriceUsd = toBN(tradeData.price);\n\n        const highValueHolders = holdersData\n            .filter((holder) => {\n                const balanceUsd = toBN(holder.balance).multipliedBy(\n                    tokenPriceUsd\n                );\n                return balanceUsd.isGreaterThan(5);\n            })\n            .map((holder) => ({\n                holderAddress: holder.address,\n                balanceUsd: toBN(holder.balance)\n                    .multipliedBy(tokenPriceUsd)\n                    .toFixed(2),\n            }));\n\n        return highValueHolders;\n    }\n\n    async checkRecentTrades(tradeData: TokenTradeData): Promise<boolean> {\n        return toBN(tradeData.volume_24h_usd).isGreaterThan(0);\n    }\n\n    async countHighSupplyHolders(\n        securityData: TokenSecurityData\n    ): Promise<number> {\n        try {\n            const ownerBalance = toBN(securityData.ownerBalance);\n            const totalSupply = ownerBalance.plus(securityData.creatorBalance);\n\n            const highSupplyHolders = await this.fetchHolderList();\n            const highSupplyHoldersCount = highSupplyHolders.filter(\n                (holder) => {\n                    const balance = toBN(holder.balance);\n                    return balance.dividedBy(totalSupply).isGreaterThan(0.02);\n                }\n            ).length;\n            return highSupplyHoldersCount;\n        } catch (error) {\n            elizaLogger.error(\"Error counting high supply holders:\", error);\n            return 0;\n        }\n    }\n\n    async getProcessedTokenData(): Promise<ProcessedTokenData> {\n        try {\n            elizaLogger.log(\n                `Fetching security data for token: ${this.tokenAddress}`\n            );\n            const security = await this.fetchTokenSecurity();\n\n            const tokenCodex = await this.fetchTokenCodex();\n\n            elizaLogger.log(\n                `Fetching trade data for token: ${this.tokenAddress}`\n            );\n            const tradeData = await this.fetchTokenTradeData();\n\n            elizaLogger.log(\n                `Fetching DexScreener data for token: ${this.tokenAddress}`\n            );\n            const dexData = await this.fetchDexScreenerData();\n\n            elizaLogger.log(\n                `Analyzing holder distribution for token: ${this.tokenAddress}`\n            );\n            const holderDistributionTrend =\n                await this.analyzeHolderDistribution(tradeData);\n\n            elizaLogger.log(\n                `Filtering high-value holders for token: ${this.tokenAddress}`\n            );\n            const highValueHolders =\n                await this.filterHighValueHolders(tradeData);\n\n            elizaLogger.log(\n                `Checking recent trades for token: ${this.tokenAddress}`\n            );\n            const recentTrades = await this.checkRecentTrades(tradeData);\n\n            elizaLogger.log(\n                `Counting high-supply holders for token: ${this.tokenAddress}`\n            );\n            const highSupplyHoldersCount =\n                await this.countHighSupplyHolders(security);\n\n            elizaLogger.log(\n                `Determining DexScreener listing status for token: ${this.tokenAddress}`\n            );\n            const isDexScreenerListed = dexData.pairs.length > 0;\n            const isDexScreenerPaid = dexData.pairs.some(\n                (pair) => pair.boosts && pair.boosts.active > 0\n            );\n\n            const processedData: ProcessedTokenData = {\n                security,\n                tradeData,\n                holderDistributionTrend,\n                highValueHolders,\n                recentTrades,\n                highSupplyHoldersCount,\n                dexScreenerData: dexData,\n                isDexScreenerListed,\n                isDexScreenerPaid,\n                tokenCodex,\n            };\n\n            // elizaLogger.log(\"Processed token data:\", processedData);\n            return processedData;\n        } catch (error) {\n            elizaLogger.error(\"Error processing token data:\", error);\n            throw error;\n        }\n    }\n\n    async shouldTradeToken(): Promise<boolean> {\n        try {\n            const tokenData = await this.getProcessedTokenData();\n            const { tradeData, security, dexScreenerData } = tokenData;\n            const { ownerBalance, creatorBalance } = security;\n            const { liquidity, marketCap } = dexScreenerData.pairs[0];\n            const liquidityUsd = toBN(liquidity.usd);\n            const marketCapUsd = toBN(marketCap);\n            const totalSupply = toBN(ownerBalance).plus(creatorBalance);\n            const _ownerPercentage = toBN(ownerBalance).dividedBy(totalSupply);\n            const _creatorPercentage =\n                toBN(creatorBalance).dividedBy(totalSupply);\n            const top10HolderPercent = toBN(tradeData.volume_24h_usd).dividedBy(\n                totalSupply\n            );\n            const priceChange24hPercent = toBN(\n                tradeData.price_change_24h_percent\n            );\n            const priceChange12hPercent = toBN(\n                tradeData.price_change_12h_percent\n            );\n            const uniqueWallet24h = tradeData.unique_wallet_24h;\n            const volume24hUsd = toBN(tradeData.volume_24h_usd);\n            const volume24hUsdThreshold = 1000;\n            const priceChange24hPercentThreshold = 10;\n            const priceChange12hPercentThreshold = 5;\n            const top10HolderPercentThreshold = 0.05;\n            const uniqueWallet24hThreshold = 100;\n            const isTop10Holder = top10HolderPercent.gte(\n                top10HolderPercentThreshold\n            );\n            const isVolume24h = volume24hUsd.gte(volume24hUsdThreshold);\n            const isPriceChange24h = priceChange24hPercent.gte(\n                priceChange24hPercentThreshold\n            );\n            const isPriceChange12h = priceChange12hPercent.gte(\n                priceChange12hPercentThreshold\n            );\n            const isUniqueWallet24h =\n                uniqueWallet24h >= uniqueWallet24hThreshold;\n            const isLiquidityTooLow = liquidityUsd.lt(1000);\n            const isMarketCapTooLow = marketCapUsd.lt(100000);\n            return (\n                isTop10Holder ||\n                isVolume24h ||\n                isPriceChange24h ||\n                isPriceChange12h ||\n                isUniqueWallet24h ||\n                isLiquidityTooLow ||\n                isMarketCapTooLow\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error processing token data:\", error);\n            throw error;\n        }\n    }\n\n    formatTokenData(data: ProcessedTokenData): string {\n        let output = `**Token Security and Trade Report**\\n`;\n        output += `Token Address: ${this.tokenAddress}\\n\\n`;\n\n        // Security Data\n        output += `**Ownership Distribution:**\\n`;\n        output += `- Owner Balance: ${data.security.ownerBalance}\\n`;\n        output += `- Creator Balance: ${data.security.creatorBalance}\\n`;\n        output += `- Owner Percentage: ${data.security.ownerPercentage}%\\n`;\n        output += `- Creator Percentage: ${data.security.creatorPercentage}%\\n`;\n        output += `- Top 10 Holders Balance: ${data.security.top10HolderBalance}\\n`;\n        output += `- Top 10 Holders Percentage: ${data.security.top10HolderPercent}%\\n\\n`;\n\n        // Trade Data\n        output += `**Trade Data:**\\n`;\n        output += `- Holders: ${data.tradeData.holder}\\n`;\n        output += `- Unique Wallets (24h): ${data.tradeData.unique_wallet_24h}\\n`;\n        output += `- Price Change (24h): ${data.tradeData.price_change_24h_percent}%\\n`;\n        output += `- Price Change (12h): ${data.tradeData.price_change_12h_percent}%\\n`;\n        output += `- Volume (24h USD): $${toBN(data.tradeData.volume_24h_usd).toFixed(2)}\\n`;\n        output += `- Current Price: $${toBN(data.tradeData.price).toFixed(2)}\\n\\n`;\n\n        // Holder Distribution Trend\n        output += `**Holder Distribution Trend:** ${data.holderDistributionTrend}\\n\\n`;\n\n        // High-Value Holders\n        output += `**High-Value Holders (>$5 USD):**\\n`;\n        if (data.highValueHolders.length === 0) {\n            output += `- No high-value holders found or data not available.\\n`;\n        } else {\n            data.highValueHolders.forEach((holder) => {\n                output += `- ${holder.holderAddress}: $${holder.balanceUsd}\\n`;\n            });\n        }\n        output += `\\n`;\n\n        // Recent Trades\n        output += `**Recent Trades (Last 24h):** ${data.recentTrades ? \"Yes\" : \"No\"}\\n\\n`;\n\n        // High-Supply Holders\n        output += `**Holders with >2% Supply:** ${data.highSupplyHoldersCount}\\n\\n`;\n\n        // DexScreener Status\n        output += `**DexScreener Listing:** ${data.isDexScreenerListed ? \"Yes\" : \"No\"}\\n`;\n        if (data.isDexScreenerListed) {\n            output += `- Listing Type: ${data.isDexScreenerPaid ? \"Paid\" : \"Free\"}\\n`;\n            output += `- Number of DexPairs: ${data.dexScreenerData.pairs.length}\\n\\n`;\n            output += `**DexScreener Pairs:**\\n`;\n            data.dexScreenerData.pairs.forEach((pair, index) => {\n                output += `\\n**Pair ${index + 1}:**\\n`;\n                output += `- DEX: ${pair.dexId}\\n`;\n                output += `- URL: ${pair.url}\\n`;\n                output += `- Price USD: $${toBN(pair.priceUsd).toFixed(6)}\\n`;\n                output += `- Volume (24h USD): $${toBN(pair.volume.h24).toFixed(2)}\\n`;\n                output += `- Boosts Active: ${pair.boosts && pair.boosts.active}\\n`;\n                output += `- Liquidity USD: $${toBN(pair.liquidity.usd).toFixed(2)}\\n`;\n            });\n        }\n        output += `\\n`;\n\n        elizaLogger.log(\"Formatted token data:\", output);\n        return output;\n    }\n\n    async getFormattedTokenReport(): Promise<string> {\n        try {\n            elizaLogger.log(\"Generating formatted token report...\");\n            const processedData = await this.getProcessedTokenData();\n            return this.formatTokenData(processedData);\n        } catch (error) {\n            elizaLogger.error(\"Error generating token report:\", error);\n            return \"Unable to fetch token information. Please try again later.\";\n        }\n    }\n}\n\nconst tokenAddress = PROVIDER_CONFIG.TOKEN_ADDRESSES.Example;\n\nconst connection = new Connection(PROVIDER_CONFIG.DEFAULT_RPC);\nconst tokenProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string> => {\n        try {\n            const { publicKey } = await getWalletKey(runtime, false);\n\n            const walletProvider = new WalletProvider(connection, publicKey);\n\n            const provider = new TokenProvider(\n                tokenAddress,\n                walletProvider,\n                runtime.cacheManager\n            );\n\n            return provider.getFormattedTokenReport();\n        } catch (error) {\n            elizaLogger.error(\"Error fetching token data:\", error);\n            return \"Unable to fetch token information. Please try again later.\";\n        }\n    },\n};\n\nexport { tokenProvider };\n","import BigNumber from \"bignumber.js\";\n\n// Re-export BigNumber constructor\nexport const BN = BigNumber;\n\n// Helper function to create new BigNumber instances\nexport function toBN(value: string | number | BigNumber): BigNumber {\n    return new BigNumber(value);\n}\n","import { getAccount, getAssociatedTokenAddress } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nexport async function getTokenPriceInSol(tokenSymbol: string): Promise<number> {\n    const response = await fetch(\n        `https://price.jup.ag/v6/price?ids=${tokenSymbol}`\n    );\n    const data = await response.json();\n    return data.data[tokenSymbol].price;\n}\n\nasync function getTokenBalance(\n    connection: Connection,\n    walletPublicKey: PublicKey,\n    tokenMintAddress: PublicKey\n): Promise<number> {\n    const tokenAccountAddress = await getAssociatedTokenAddress(\n        tokenMintAddress,\n        walletPublicKey\n    );\n\n    try {\n        const tokenAccount = await getAccount(connection, tokenAccountAddress);\n        const tokenAmount = tokenAccount.amount as unknown as number;\n        return tokenAmount;\n    } catch (error) {\n        elizaLogger.error(\n            `Error retrieving balance for token: ${tokenMintAddress.toBase58()}`,\n            error\n        );\n        return 0;\n    }\n}\n\nasync function getTokenBalances(\n    connection: Connection,\n    walletPublicKey: PublicKey\n): Promise<{ [tokenName: string]: number }> {\n    const tokenBalances: { [tokenName: string]: number } = {};\n\n    // Add the token mint addresses you want to retrieve balances for\n    const tokenMintAddresses = [\n        new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // USDC\n        new PublicKey(\"So11111111111111111111111111111111111111112\"), // SOL\n        // Add more token mint addresses as needed\n    ];\n\n    for (const mintAddress of tokenMintAddresses) {\n        const tokenName = getTokenName(mintAddress);\n        const balance = await getTokenBalance(\n            connection,\n            walletPublicKey,\n            mintAddress\n        );\n        tokenBalances[tokenName] = balance;\n    }\n\n    return tokenBalances;\n}\n\nfunction getTokenName(mintAddress: PublicKey): string {\n    // Implement a mapping of mint addresses to token names\n    const tokenNameMap: { [mintAddress: string]: string } = {\n        EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n        So11111111111111111111111111111111111111112: \"SOL\",\n        // Add more token mint addresses and their corresponding names\n    };\n\n    return tokenNameMap[mintAddress.toBase58()] || \"Unknown Token\";\n}\n\nexport { getTokenBalance, getTokenBalances };\n","// export * from \"./providers/token.ts\";\n// export * from \"./providers/wallet.ts\";\n// export * from \"./providers/trustScoreProvider.ts\";\n// export * from \"./evaluators/trust.ts\";\n\nimport { Plugin } from \"@elizaos/core\";\nimport { executeSwap } from \"./actions/swap.ts\";\nimport take_order from \"./actions/takeOrder\";\nimport pumpfun from \"./actions/pumpfun.ts\";\nimport fomo from \"./actions/fomo.ts\";\nimport { executeSwapForDAO } from \"./actions/swapDao\";\nimport transferToken from \"./actions/transfer.ts\";\nimport { walletProvider } from \"./providers/wallet.ts\";\n// import { trustScoreProvider } from \"./providers/trustScoreProvider.ts\";\nimport { trustEvaluator } from \"./evaluators/trust.ts\";\nimport { TokenProvider } from \"./providers/token.ts\";\nimport { WalletProvider } from \"./providers/wallet.ts\";\nimport { getTokenBalance, getTokenBalances } from \"./providers/tokenUtils.ts\";\n\nexport { TokenProvider, WalletProvider, getTokenBalance, getTokenBalances };\n\nexport const solanaPlugin: Plugin = {\n    name: \"solana\",\n    description: \"Solana Plugin for Eliza\",\n    actions: [\n        executeSwap,\n        pumpfun,\n        fomo,\n        transferToken,\n        executeSwapForDAO,\n        take_order,\n    ],\n    evaluators: [trustEvaluator],\n    providers: [walletProvider/*, trustScoreProvider*/],\n};\n\nexport default solanaPlugin;\n"],"mappings":"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","names":["settings","elizaLogger","Connection","VersionedTransaction","BigNumber","elizaLogger","PublicKey","connection","elizaLogger","items","portfolio","PublicKey","Connection","PublicKey","elizaLogger","connection","PublicKey","connection","settings","BigNumber","elizaLogger","walletProvider","Connection","VersionedTransaction","ModelClass","composeContext","Connection","Keypair","settings","ModelClass","generateObjectDeprecated","composeContext","elizaLogger","elizaLogger","connection","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","Keypair","connection","Connection","settings","generateImage","elizaLogger","Connection","Keypair","VersionedTransaction","getAssociatedTokenAddressSync","bs58","settings","ModelClass","composeContext","elizaLogger","createAndBuyToken","connection","bs58","VersionedTransaction","getAssociatedTokenAddressSync","promptConfirmation","elizaLogger","composeContext","ModelClass","generateImage","bs58","Keypair","connection","Connection","settings","createAndBuyToken","elizaLogger","Connection","PublicKey","connection","PublicKey","promptConfirmation","elizaLogger","Connection","getAssociatedTokenAddressSync","elizaLogger","settings","Connection","PublicKey","VersionedTransaction","ModelClass","composeContext","generateObjectDeprecated","elizaLogger","composeContext","ModelClass","connection","Connection","settings","PublicKey","getAssociatedTokenAddressSync","VersionedTransaction","composeContext","elizaLogger","ModelClass","Connection","elizaLogger","settings","NodeCache","path","BigNumber","BigNumber","Connection","PROVIDER_CONFIG","tokenAddress","walletProvider","NodeCache","settings","elizaLogger","connection","Connection","elizaLogger","composeContext","ModelClass","walletProvider","Connection","tokenAddress","user","getAssociatedTokenAddress","PublicKey","elizaLogger","connection","getAssociatedTokenAddress","elizaLogger","PublicKey"]}